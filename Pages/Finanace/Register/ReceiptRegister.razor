@page "/ReceiptRegister/{RType}"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using System.IO
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Buttons
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Http.Extensions
@using OrisonFeeAnalysis.Entities.Financial.Main
@using OrisonFeeAnalysis.Entities.General
@using System.Dynamic
@using OrisonFeeAnalysis.Data.BoldReport
@using OrisonFeeAnalysis.Entities
@using Newtonsoft.Json

@inject IJSRuntime Runtime
@inject NavigationManager NavigationManager
@inject IJSRuntime IJS
@inject OrisonFeeAnalysis.Services.GeneralServices genServ
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonFeeAnalysis.Contract.General.IVoucherMasterManager _VoucherMasterManager
@inject OrisonFeeAnalysis.Services.FinServices finServ
@inject OrisonFeeAnalysis.Contract.Financial.Main.IVoucherDocuments  _IVoucherDocuments
@inject OrisonFeeAnalysis.Logics.Contract.BoldReport.IBoldReportManager _BoldReport

<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

<div class="box-card-shadow">
    <div class="row">
        <div class="col-md-12">
            @*<label class="label">Receipt Type:</label>
                <SfComboBox TValue="string" TItem="VtypeTran" Width="200px" AllowCustom=true Placeholder="Receipt" DataSource="@VoucherTypes">
                    <ComboBoxFieldSettings Value="ID" Text="VType"></ComboBoxFieldSettings>
                    <ComboBoxEvents TItem="VtypeTran" TValue="string" ValueChange="@VtypeComboChangeHandler"></ComboBoxEvents>
                </SfComboBox>*@
            <SfButton IsPrimary="true" OnClick="@AddNew" IconCss="Icon add" CssClass="btn">New</SfButton>
            <SfButton IconCss="Icon preprint" CssClass="e-btn4" OnClick="@(async () => await BulkPrint_Click())" />
            <SfTextBox @ref="search" Input="OnInput" Placeholder="Global Search" Width="170px" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch" Created="@onCreateSearch"></SfTextBox>
            <SfDatePicker TValue="DateTime?" Width="150px" Format="dd/MM/yyyy" @bind-Value="@StartDate" Placeholder='Start Date'></SfDatePicker>
            <SfDatePicker TValue="DateTime?" Width="150px" Format="dd/MM/yyyy" @bind-Value="@EndDate" Placeholder='End Date'></SfDatePicker>
            <SfButton IconCss="Icon search" title="Search" CssClass="e-btn4" @onclick="@Search_Click" IsPrimary="false" />
            <SfButton IconCss="Icon filter" title="Clear Filter" CssClass="e-btn4" @onclick="@Clear_Click" IsPrimary="false" />
        </div>
    </div>
</div>
<div class="box-card-shadow">


    <SfGrid DataSource="@voucherList"
            ID="GridExpense"
            GridLines="GridLine.Both"
            @ref="VMast"
            Height="570" Width="100%"
            AllowPaging="true"
            AllowFiltering="true"
            AllowResizing="true"
            AllowReordering="true"
            ShowColumnChooser="true"
            RowHeight="23">

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="false"></GridFilterSettings>
        <GridPageSettings PageSize="50"></GridPageSettings>
        <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
        <GridTemplates>
            <!--<DetailTemplate>
                @{
                    DtVoucherMaster Vou = context as DtVoucherMaster;
                }
                <SfGrid Width="740px" DataSource="@vDocList" TValue="VoucherDocuments" Query="@(new Query().Where("VID", "equal", Vou.ID))" AllowPaging="false">-->
            @*<GridPageSettings PageSize="4"></GridPageSettings>*@

            <!--<GridColumns>
                <GridColumn Width="9px" TextAlign="TextAlign.Center" Index="1">
                    <Template Context="contxt">
                        @{
                            string DId = (contxt as VoucherDocuments).ID.ToString();
                            string docfile = (contxt as VoucherDocuments).FileName.ToString();
                            <a @onclick="@(() => { ShowDoc(Convert.ToInt32(DId),docfile); })">
                                <img src="Images/icons8-image-90.png" style="height: 20px; width: 20px; cursor: pointer;" />
                            </a>
                            <a @onclick="@(() => { DelDoc(Convert.ToInt32(DId),docfile); })">
                                <img src="Images/delete-big.png" style="height: 20px; width: 20px; cursor: pointer;" />
                            </a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(VoucherDocuments.ID) HeaderText="ID" Visible="false" Width="50"> </GridColumn>-->
            @*<GridColumn Field=@nameof(VoucherDocuments.FileName) HeaderText="Name" Width="80"></GridColumn>*@

            <!--<GridColumn TextAlign="TextAlign.Left" HeaderText="Name" Width="80">
                            <Template Context="contxt">
                                @{
                                    string DId = (contxt as VoucherDocuments).ID.ToString();
                                    string FileName = (contxt as VoucherDocuments).FileName.ToString();
                                    <a title="View" style="cursor:pointer;" @onclick="@(() => { ShowDoc(Convert.ToInt32(DId),FileName); })">
                                        <span>@FileName</span>
                                    </a>

                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </DetailTemplate>-->
        </GridTemplates>
        <GridColumns>
            @* <GridCommandColumns>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { CssClass="oi oi-pencil grid-edit btn-width"})" Title="Edit"></GridCommandColumn>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { CssClass="oi oi-trash grid-delete btn-width" })" Title="Delete"></GridCommandColumn>
                </GridCommandColumns>*@
            <GridColumn Width="50px" TextAlign="TextAlign.Center" Index="1">
                <Template>
                    @{
                        string ExpId = (context as DtVoucherMaster).ID.ToString();
                        string ExpVNo = (context as DtVoucherMaster).VNo.ToString();
                        //<a @onclick="@(() => { Upload_Click(Convert.ToInt32(ExpId),ExpVNo); })"><img src="Images/icons8-upload-64.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                        <a @onclick="@(() => { Edit_ClickExpense(Convert.ToInt32(ExpId)); })"><img src="Images/Pencil.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                        <a @onclick="@(async() => {await PrePrint_Click(Convert.ToInt32(ExpId)); })"><img src="Images/printer.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                        //</div>

                        //<a @onclick="@(() => { Edit_ClickExpense(Convert.ToInt32(ExpId)); })"><img src="Images/Pencil.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                        //<a @onclick="@(() => { PrePrint_Click(ExpId); })"><img src="Images/OFPrePrint.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                    }
                </Template>
            </GridColumn>
            <GridColumn Type="ColumnType.Number" HeaderText="SlNo." Width="50" Index="2">
                <Template>
                    @{
                        var val = GetRowCountExp(context as DtVoucherMaster);

                        @val.Result
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.ID) IsPrimaryKey="true" Visible="false" AllowFiltering="false"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.VNo) HeaderText="Invoice No." Index="3" Width="80px"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.Vdate) HeaderText="Date" Format="dd/MM/yyyy" Index="4" Width="80px"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.AccountName) HeaderText="PartyName" Index="5" Width="200px"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.Description) HeaderText="Description" Index="6" Width="200px"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.Amount) Format="0.00" HeaderText="Amount" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Index="7" Width="120px"></GridColumn>
            <GridColumn Field=@nameof(DtVoucherMaster.PostingDate) Visible="false" ></GridColumn>
            @*<GridColumn Field=@nameof(DtVoucherMaster.VATAmt)  Format="0.00" HeaderText="VAT" Index="9" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="110px"></GridColumn>*@
        </GridColumns>
    </SfGrid>
</div>
<SfDialog Width="700px" IsModal="true" @bind-Visible="PopupUpload" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
        </Header>
        <Content>
            <div>
                <p style="color:red">
                    <SfUploader ID=UploadFiles @ref="UploaderObj" MaxFileSize="2000000" Multiple="false" AutoUpload="true" ShowFileList="true">
                        <UploaderEvents Success="OnSuccess" OnRemove="onRemove" FileSelected="OnFileSelected"></UploaderEvents>
                        <UploaderAsyncSettings SaveUrl="api/Upload/Save" RemoveUrl="api/Upload/Remove"></UploaderAsyncSettings>
                    </SfUploader>
                </p>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Close" IsPrimary="true" @onclick="@(() => PopupUpload = false)" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>


<SfDialog Width="80%" Height="80%" IsModal="true" @bind-Visible="DocVisible" ShowCloseIcon="true">

    <div class="iframecontainer">
        <iframe class="iframeresponsive-iframe" src="@docFile" height="50%" width="50%"></iframe>
    </div>
</SfDialog>
<SfDialog Width="700px" IsModal="true" @bind-Visible="PopupSaveError" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
        </Header>
        <Content>
            <div>
                <p style="color:red">
                    Something went wrong. Error in saving document details!!!
                </p>

                <p style="color:red">
                    Please check and try again !!!
                </p>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupSaveError = false)" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>



@code {
    [Parameter]
    public string RType { get; set; }
    int user, BranchID, vType;
    string docFile = "";
    public SfGrid<DtVoucherMaster> VMast { get; set; }
    SfTextBox search;
    public DateTime? StartDate { get; set; }
    public DateTime? EndDate { get; set; }
    public List<DtVoucherMaster> voucherList = new List<DtVoucherMaster>();
    public IEnumerable<VoucherDocuments> vDocList = new List<VoucherDocuments>();
    SfUploader UploaderObj;
    string filename = "";
    string filepath = "";
    string filePubpath = "";
    bool PopupUpload { get; set; }
    bool PopupSaveError { get; set; }
    bool DocVisible { get; set; }
    string VNo, GetVtype, modAccYear;
    long VId;
    string academicYear = "";
    public VoucherDocuments[] vouDocs;
    ObservableCollection<VoucherDocuments> objDocs = new ObservableCollection<VoucherDocuments>();
    public IList<VtypeTran> VoucherTypes = new List<VtypeTran>();
    VtypeTran obVtype = new VtypeTran();
    //string StrVtypeList = "";
    SfComboBox<string, VtypeTran> vtypeCombo { get; set; }
    public Query LocalDataQueryVtype { get; set; } = new Query().Take(10);

    protected override void OnParametersSet()
    {
        OnInitializedAsync();
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        academicYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        int hyphenIndex = academicYear.IndexOf('-');
        modAccYear = hyphenIndex != -1 ? academicYear.Substring(0, hyphenIndex) : academicYear;

        if (RType != null)
        {
            if (RType == "RSE")
            { await sessionStorage.SetItemAsync("Vtype", "Receipt StudentExam"+ modAccYear);

            }
            else if (RType == "SF")
                await sessionStorage.SetItemAsync("Vtype", "Student Fee");
            else if (RType == "RS")
                await sessionStorage.SetItemAsync("Vtype", "Receipt Student" + modAccYear);
            BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
            user = await sessionStorage.GetItemAsync<int>("UserID");
            GetVtype = await sessionStorage.GetItemAsync<string>("Vtype");

            if (user == 0)
            {
                await sessionStorage.ClearAsync();
                NavigationManager.NavigateTo("Login");
            }
            else
            {
                // StartDate = DateTime.Now.AddYears(-1);
                try
                {
                    StartDate = DateTime.Now.Date;
                    EndDate = DateTime.Now.Date;
                    VoucherTypes = await genServ.getEntryMode("Receipt Student", true);
                    //StrVtypeList = "Payment";
                    //GetVtype = "Receipt Student";
                    vType = await genServ.getVtype(GetVtype);
                    voucherList = await _VoucherMasterManager.ListAll(vType, user, BranchID);
                    voucherList = voucherList.Where(s => s.Vdate.Date >= StartDate.Value.Date && s.Vdate.Date <= EndDate.Value.Date).ToList();
                    //VMast.Refresh();
                    vDocList = await finServ.GetAll(vType);
                    filepath = await genServ.getBranchSettings("PortalVoucherDocumentPath");
                    filePubpath = await genServ.getBranchSettings("PortalVoucherDocumentPubPath");
                }
                catch (Exception e)
                {

                    throw e;
                }

            }
        }
        await InvokeAsync(StateHasChanged);
    }
    private async Task VtypeComboChangeHandler(ChangeEventArgs<string, VtypeTran> args)

    // private void VtypeComboChangeHandler(SelectEventArgs<VtypeTran>  args)
    {
        vType = Convert.ToInt32(args.ItemData.ID);
        await vtypeSearch_Click();
        await InvokeAsync(StateHasChanged);
    }
    public async Task vtypeSearch_Click()
    {
        //vType =  Convert.ToInt32(args.ItemData.ID);
        voucherList = await _VoucherMasterManager.ListAll(vType, user, BranchID);
        vDocList = await finServ.GetAll(vType);

    }
    public async Task Search_Click()
    {
        voucherList = await _VoucherMasterManager.ListAll(vType, user, BranchID);
        if (StartDate != null && EndDate != null)
        {
            try
            {
                voucherList = voucherList.Where(s => s.Vdate.Date >= StartDate.Value.Date && s.Vdate.Date <= EndDate.Value.Date).ToList();
                VMast.Refresh();
            }
            catch (Exception ex)
            { throw ex; }
        }
    }
    public async Task Clear_Click()
    {
        await VMast.ClearFilteringAsync();
        await VMast.Search("");
        voucherList = await _VoucherMasterManager.ListAll(vType, user, BranchID);
        StartDate = null;
        EndDate = null;
    }
    public void OnInput(InputEventArgs args)
    {
        this.VMast.Search(args.Value);
    }
    public void OnSearch(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null)
        {
            VMast.SearchAsync(args.Value);
            this.StateHasChanged();
        }
    }
    public void onCreateSearch()
    {
        this.search.AddIcon("append", "e-upload-picture");
    }
    private void AddNew()
    {
        NavigationManager.NavigateTo("ReceiptVoucher");
    }
    public void Edit_ClickExpense(long Id)
    {
        NavigationManager.NavigateTo("ReceiptVoucher/" + Id);
    }
    public void ShowDoc(int Id, string DocPath)
    {
        DocVisible = true;
        docFile = filePubpath + DocPath;

    }
    public async void DelDoc(int Id, string DocPath)
    {
        try
        {
            await _IVoucherDocuments.DeleteDoc(Id);
            vDocList = await finServ.GetAll(vType);
            try
            {
                var filename = Path.Combine(filepath, DocPath);
                filename = $@"{filename}";
                if (System.IO.File.Exists(filename))
                {
                    System.IO.File.Delete(filename);
                }
            }
            catch (Exception ex)
            {
                PopupSaveError = true;
            }

        }
        catch (Exception ex)
        {
            PopupSaveError = true;
        }
    }
    public void Upload_Click(long _Id, string _VNo)
    {
        VId = _Id;
        VNo = _VNo;
        //PopupUpload = true;
        //NavigationManager.NavigateTo("PaymentVoucher/" + Id+"/Edit");
    }
    private void OnChange(UploadChangeEventArgs args)
    {
        foreach (var file in args.Files)
        {

            var path = @"" + filepath + "" + file.FileInfo.Name;
            FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
            file.Stream.WriteTo(filestream);
            filestream.Close();
            file.Stream.Close();
        }
    }
    public async void OnSuccess(SuccessEventArgs args)
    {

        var customHeader = args.Response.Headers.Split(new Char[] { '\n' })[1]; // To split the response header values
        var key = customHeader.Split(new Char[] { ':' })[0]; // To get the key pair of provided custom data in header
        var value = customHeader.Split(new Char[] { ':' })[1].Trim(); // To get the value for the key pair of provided custom data in header
        try
        {

            IEnumerable<VoucherDocuments> ob = objDocs.Where(x => x.FileName == args.File.Name).ToList();
            vouDocs = ob.ToList().ToArray();
            HttpResponseMessage response = await _IVoucherDocuments.SaveDocs(vouDocs);
            if (response.IsSuccessStatusCode)
            {
                vDocList = await finServ.GetAll(vType);
            }
            else
            {
                PopupSaveError = true;
            }
        }
        catch (Exception ex)
        {
            PopupSaveError = true;
        }
    }
    private void onRemove(RemovingEventArgs args)
    {
        foreach (var removeFile in args.FilesData)
        {
            if (File.Exists(Path.Combine(@"" + filepath + "", removeFile.Name)))
            {
                File.Delete(Path.Combine(@"" + filepath + "", removeFile.Name));
            }
        }
    }
    public void OnFileSelected(SelectedEventArgs args)
    {
        Random ran = new Random();
        foreach (var file in args.FilesData)
        {
            var j = "";
            j = vType.ToString() + "-" + VNo;
            string[] split = file.Id.Split('_');
            var i = split.Last();
            var oname = file.Name;
            file.Name = "00-" + j + "-" + ran.Next() + "-" + i;
            filename = "";
            if (filename == "" || filename == null)
            {
                filename = file.Name;
            }

            VoucherDocuments obj = new VoucherDocuments();
            obj.VID = Convert.ToInt32(VId);
            obj.FileName = filename;
            obj.Path = oname;
            objDocs.Add(obj);

        }
        //vouDocs= objDocs.ToList().ToArray();
        args.IsModified = true;
        args.ModifiedFilesData = args.FilesData;
    }

    public async Task<int> GetRowCountExp(DtVoucherMaster val)
    {
        int RowCounter = voucherList.IndexOf(val);
        return RowCounter + 1;
    }
    //public async Task PrePrint_Click()
    //{
    //    //IJS.InvokeAsync<object>("open", new object[] { "ReportViewer?VoucherID=" + vID + "&ReportName=Tax Invoice", "_blank" });
    //    //await IJS.InvokeAsync<object>("open", new object[] { "RptPrePrint/" + vID, "_self" });

    //    var _BulkReport = VMast.GetFilteredRecordsAsync();


    //}
    public async Task PrePrint_Click(int vID)
    {
        var Data1 = await _BoldReport.GetFeeRecieptByID(vID, 0, academicYear);
        var Data2 = await _BoldReport.GetFeeRecieptByID(vID, 1, academicYear);
        var VType = await _BoldReport.GetFeeVtype(vID);

        DataSource dt = new DataSource();
        dt.DataSet1 = new List<ExpandoObject>();
        if (GetVtype == "Receipt StudentExam" + modAccYear)
        {
            foreach (var ds in VType)
            {
                foreach (var d in Data1)
                {
                    if (ds.TranType == "Cash")
                        d.TranType = d.TranType + ds.TranType + ", ";
                    else if (ds.TranType == "Cheque")
                        d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "/ " + ds.BankName + "), ";
                    else if (ds.TranType == "TT")
                        d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "), ";
                }
                foreach (var d in Data2)
                {
                    if (ds.TranType == "Cash")
                        d.TranType = d.TranType + ds.TranType + ", ";
                    else if (ds.TranType == "Cheque")
                        d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "/ " + ds.BankName + "), ";
                    else if (ds.TranType == "TT")
                        d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "), ";
                }
            }
        }
        else if (GetVtype == "Receipt Student" + modAccYear)
        {
            foreach (var ds in VType)
            {
                int index = VType.IndexOf(ds);
                if ((Data1.Count() - 1) < index)
                {
                    Data1.Add(new ReceiptPrint());
                    Data1[index].AccountName = Data1[0].AccountName;
                    Data1[index].VEID = Data1[0].VEID;
                    Data1[index].ONO = Data1[0].ONO;
                    Data1[index].Class = Data1[0].Class;
                    Data1[index].Description = Data1[0].Description;
                    Data1[index].Amount = Data1[0].Amount;
                    Data1[index].Father = Data1[0].Father;
                    Data1[index].TRNNo = Data1[0].TRNNo;
                    Data1[index].Date = Data1[0].Date;
                    Data1[index].Accountcode = Data1[0].Accountcode;
                    Data1[index].Division = Data1[0].Division;
                }
                if ((Data2.Count() - 1) < index)
                {
                    Data2.Add(new ReceiptPrint());
                    Data2[index].AccountName = Data2[0].AccountName;
                    Data2[index].VEID = Data2[0].VEID;
                    Data2[index].ONO = Data2[0].ONO;
                    Data2[index].Class = Data2[0].Class;
                    Data2[index].Description = Data2[0].Description;
                    Data2[index].Amount = Data2[0].Amount;
                    Data2[index].Father = Data2[0].Father;
                    Data2[index].TRNNo = Data2[0].TRNNo;
                    Data2[index].Date = Data2[0].Date;
                    Data2[index].Accountcode = Data2[0].Accountcode;
                    Data2[index].Division = Data2[0].Division;
                }
                Data1[index].TranType = ds.TranType;
                Data1[index].debit = ds.debit;
                Data1[index].ChequeNo = ds.ChequeNo;
                Data1[index].ChequeDate = ds.ChequeDate;
                Data1[index].BankName = ds.BankName;

                Data2[index].TranType = ds.TranType;
                Data2[index].debit = ds.debit;
                Data2[index].ChequeNo = ds.ChequeNo;
                Data2[index].ChequeDate = ds.ChequeDate;
                Data2[index].BankName = ds.BankName;
            }
        }
        dt.DataSet1.AddRange(JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data1)));
        dt.DataSet1.AddRange(JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data2)));
        List<JSReportParameter> parameters = new List<JSReportParameter>()
        {
            new JSReportParameter()
            {
                Name = "AcademicYear",
                Values = new List<string>(){ academicYear.ToString() }
            }
        };
        if (GetVtype == "Receipt Student" + modAccYear)
        {
            var Result = _BoldReport.GetReport("Student Fee Receipt", dt, parameters);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsOpenIntoNewTab",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
        else if (GetVtype == "Receipt StudentExam" + modAccYear)
        {
            var Result = _BoldReport.GetReport("Exam Fee Receipt", dt, null);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsOpenIntoNewTab",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
    }
    public async Task BulkPrint_Click()
    {
        var _bulk = ((List<DtVoucherMaster>)await VMast.GetFilteredRecordsAsync()).ToList().Select(a => a.ID);
        DataSource dt = new DataSource();
        dt.DataSet1 = new List<ExpandoObject>();
        try
        {
            foreach (var id in _bulk)
            {
                var Data1 = await _BoldReport.GetFeeRecieptByID(id, 0, academicYear);
                var VType = await _BoldReport.GetFeeVtype(id);
                var Data2 = await _BoldReport.GetFeeRecieptByID(id, 1, academicYear);

                if (GetVtype == "Receipt StudentExam" + modAccYear)
                {
                    foreach (var ds in VType)
                    {
                        foreach (var d in Data1)
                        {
                            if (ds.TranType == "Cash")
                                d.TranType = d.TranType + ds.TranType + ", ";
                            else if (ds.TranType == "Cheque")
                                d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "/ " + ds.BankName + "), ";
                            else if (ds.TranType == "TT")
                                d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "), ";
                        }
                        foreach (var d in Data2)
                        {
                            if (ds.TranType == "Cash")
                                d.TranType = d.TranType + ds.TranType + ", ";
                            else if (ds.TranType == "Cheque")
                                d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "/ " + ds.BankName + "), ";
                            else if (ds.TranType == "TT")
                                d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "), ";
                        }
                    }
                }

                else if (GetVtype == "Receipt Student" + modAccYear)
                {
                    foreach (var ds in VType)
                    {
                        int index = VType.IndexOf(ds);
                        if ((Data1.Count() - 1) < index)
                        {
                            Data1.Add(new ReceiptPrint());
                            Data1[index].AccountName = Data1[0].AccountName;
                            Data1[index].VEID = Data1[0].VEID;
                            Data1[index].ONO = Data1[0].ONO;
                            Data1[index].Class = Data1[0].Class;
                            Data1[index].Description = Data1[0].Description;
                            Data1[index].Amount = Data1[0].Amount;
                            Data1[index].Father = Data1[0].Father;
                            Data1[index].TRNNo = Data1[0].TRNNo;
                            Data1[index].Date = Data1[0].Date;
                            Data1[index].Accountcode = Data1[0].Accountcode;
                            Data1[index].Division = Data1[0].Division;
                        }
                        if ((Data2.Count() - 1) < index)
                        {
                            Data2.Add(new ReceiptPrint());
                            Data2[index].AccountName = Data2[0].AccountName;
                            Data2[index].VEID = Data2[0].VEID;
                            Data2[index].ONO = Data2[0].ONO;
                            Data2[index].Class = Data2[0].Class;
                            Data2[index].Description = Data2[0].Description;
                            Data2[index].Amount = Data2[0].Amount;
                            Data2[index].Father = Data2[0].Father;
                            Data2[index].TRNNo = Data2[0].TRNNo;
                            Data2[index].Date = Data2[0].Date;
                            Data2[index].Accountcode = Data2[0].Accountcode;
                            Data2[index].Division = Data2[0].Division;
                        }
                        Data1[index].TranType = ds.TranType;
                        Data1[index].debit = ds.debit;
                        Data1[index].ChequeNo = ds.ChequeNo;
                        Data1[index].ChequeDate = ds.ChequeDate;
                        Data1[index].BankName = ds.BankName;

                        Data2[index].TranType = ds.TranType;
                        Data2[index].debit = ds.debit;
                        Data2[index].ChequeNo = ds.ChequeNo;
                        Data2[index].ChequeDate = ds.ChequeDate;
                        Data2[index].BankName = ds.BankName;
                    }
                }
                dt.DataSet1.AddRange(JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data1)));
                dt.DataSet1.AddRange(JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data2)));

            }
        }
        catch (Exception e)
        {

            throw e;
        }
        List<JSReportParameter> parameters = new List<JSReportParameter>()
        {
            new JSReportParameter()
            {
                Name = "AcademicYear",
                Values = new List<string>(){ academicYear.ToString() }
            }
        };
        if (GetVtype == "Receipt Student" + modAccYear)
        {
            var Result = _BoldReport.GetReport("Student Fee Receipt", dt, parameters);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsSaveAsFile",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
        else if (GetVtype == "Receipt StudentExam" + modAccYear)
        {
            var Result = _BoldReport.GetReport("Exam Fee Receipt", dt, null);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsSaveAsFile",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
    }
}
