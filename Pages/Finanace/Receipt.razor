@page "/ReceiptVoucher"
@page "/ReceiptVoucher/{Id}"

@using System.Collections.ObjectModel;

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Navigations
@using Action = Syncfusion.Blazor.Grids.Action
@using BlazorStrap
@using System.Threading
@using OrisonFeeAnalysis.Entities.Financial.Main
@using OrisonFeeAnalysis.Entities.Financial
@using OrisonFeeAnalysis.Entities.Inventory
@using OrisonFeeAnalysis.Data
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Lists
@using OrisonFeeAnalysis.Entities
@using Newtonsoft.Json

@using OrisonFeeAnalysis.Data.BoldReport
@using System.Dynamic
@inject OrisonFeeAnalysis.Logics.Contract.BoldReport.IBoldReportManager _BoldReport

@inject OrisonFeeAnalysis.Contract.Financial.Main.IAccountAllocation _AccountAllocationManager
@inject OrisonFeeAnalysis.Contract.Financial.Main.IFinancialManager _Ifinancial
@inject OrisonFeeAnalysis.Services.FinVoucherEntryService _finVEService
@inject OrisonFeeAnalysis.Contract.Financial.Main.ICheque _ChequeManager
@inject OrisonFeeAnalysis.Contract.Financial.Main.IAccountList _IAccountList
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient Http
@inject NavigationManager uriHelper
@inject OrisonFeeAnalysis.Contract.Financial.Main.IVEntry _VEntryManager
@inject OrisonFeeAnalysis.Services.FinServices finServ
@inject OrisonFeeAnalysis.Services.TaxInvoiceService taxServ
@inject OrisonFeeAnalysis.Contract.Financial.Main.IVoucher _VoucherManager
@inject OrisonFeeAnalysis.Contract.Financial.Main.IInvAccounts _IInvAccounts
@inject OrisonFeeAnalysis.Contract.Financial.Main.ICardList _ICardList
@inject OrisonFeeAnalysis.Contract.General.IVoucherMasterManager _IVoucherMasterManager
@inject OrisonFeeAnalysis.Contract.Financial.Main.IVoucherAllocation _VoucherAllocationManager
@inject OrisonFeeAnalysis.Services.ReceiptService ReceiptServ
@inject IToastService toastservice
@inject IJSRuntime Runtime

<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>


<div class="box-card-shadow">
    <div class="row">
        <div class="col-md-7">

            <SfButton @onclick="New_Click" IconCss="Icon add" CssClass="e-btn" Content="New" Disabled="@btnNEW" />
            <SfButton @onclick="Save_Click" IconCss="Icon save" CssClass="e-btn" Content="Save" Disabled="@btnsave" />
            <SfButton @onclick="Edit_Click" IconCss="Icon edit" CssClass="e-btn" Content="Edit" Disabled="@btnedit" />
            <SfButton IconCss="Icon preprint" CssClass="e-btn" Content="Print" OnClick="@(async () => await PrePrint_Click())" Disabled="@btnprint" />
            <SfButton IconCss="Icon pdf" CssClass="e-btn" Content="Pdf" Disabled="@btnpdf" />
            <SfButton @onclick="Close_click" IconCss="Icon Back2" CssClass="e-btn" Content="Close" Disabled="false" />
            <SfButton @onclick="Search_click" IconCss="Icon search" CssClass="e-btn" Content="Search" />


        </div>
        <div class="col-md-2">
            <BSAlert Color="Color.Success" @bind-IsOpen="@isSave" AutoHide="true" AutoHideDelay="10000">
                Successfully Saved <a><i class="fa fa-check" aria-hidden="true"></i></a>
            </BSAlert>
            <BSAlert Color="Color.Success" @bind-IsOpen="@isCustmr" AutoHide="true" AutoHideDelay="10000">
                Please Select Customer <a><i class="fa fa-check" aria-hidden="true"></i></a>
            </BSAlert>
            <BSAlert Color="Color.Danger" @bind-IsOpen="@allocatnErr" AutoHide="true">
                Make payment before saving <a><i class="fa fa-exclamation-circle" aria-hidden="true"></i></a>
            </BSAlert>
        </div>
        <div class="col-md-3">
            <div class="header-div-style">
                <label class="header-label">RECEIPT</label>
            </div>
        </div>
    </div>
</div>


<div class="box-card-shadow">
    <div class="pl-2" style="background-color:#E8EEFA; height: 28px;">
        <label style="font-size:medium;color:#0a1971">Receipt Details</label>
        <a style="text-decoration: none; cursor: pointer; float: right; padding-right: 5px;" title="More" @onclick="@MoreClick">
            <img src="images/MoreIcon.png" style="height:17px;width:17px;" />
        </a>
    </div>
        <div class="row">
            <div class="col-md-3">
                <label class="label">Voucher No:</label>
                <SfTextBox @bind-Value="@ReceiptNo" CssClass="textbox" Placeholder="Receipt No" Enabled="false"></SfTextBox>
            </div>
            <div class="col-md-3">
                <label class="label">Date:</label>
                <SfDatePicker @bind-Value="@DateTimeValue" CssClass="textbox" Format="dd/MM/yyyy" Enabled="false"></SfDatePicker>
            </div>
            <div class="col-md-5">
                <label class="label">Student:</label>
                <SfComboBox @ref="SfCustomerObj" TValue="string" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" TItem="dtInvAccounts"
                            Placeholder="@CustomerCombo" CssClass="e-multi-column" @bind-Value="@CustList"
                            DataSource="@CustomerList" AllowFiltering="true" PopupWidth="600px" PopupHeight="200"
                            EnableVirtualization="true" AllowCustom="false" Enabled="false">
                    <ComboBoxFieldSettings Text="ID" Value="ID"></ComboBoxFieldSettings>
                    <ComboBoxFieldSettings Text="AccountCode" Value="AccountName"></ComboBoxFieldSettings>
                    <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                    <ComboBoxTemplates TItem="dtInvAccounts">
                        <HeaderTemplate>
                            <table class="table-bordered">
                                <tr>
                                    <th style="width:95px">Code</th>
                                    <th style="width:220px">Name</th>
                                    <th style="width:95px">Parent</th>
                                    <th style="width:95px">Mobile</th>
                                    <th style="width:95px">Class</th>
                                </tr>
                            </table>
                        </HeaderTemplate>
                        <ItemTemplate Context="context">
                            <table class="table-bordered">
                                <tbody>
                                    <tr>
                                        <td style="width:95px">@((context as dtInvAccounts).AccountCode)</td>
                                        <td style="width:220px">@((context as dtInvAccounts).AccountName)</td>
                                        <td style="width:95px">@((context as dtInvAccounts).ParentID)</td>
                                        <td style="width:95px">@((context as dtInvAccounts).PerMobile)</td>
                                        <td style="width:95px">@((context as dtInvAccounts).Class)</td>
                                    </tr>
                                </tbody>
                            </table>
                        </ItemTemplate>
                    </ComboBoxTemplates>
                    <ComboBoxEvents TItem="dtInvAccounts" TValue="string" Filtering="@OnCustomerFiltering" ValueChange="@CustValueChangeHandler"></ComboBoxEvents>
                </SfComboBox>
            </div>
            <div class="col-md-1" style="margin-top:22px;">
                <SfDropDownButton CssClass="e-caret-hide" IconCss="Icon3 Sibling" style="width:49%" IconPosition="SplitButtonIconPosition.Top" title="Siblings">
                    <PopupContent>
                        <SfListView DataSource="@SibList" ShowHeader="true">
                            <ListViewFieldSettings TValue="dtInvAccounts" Id="AccountCode" Text="AccountName"></ListViewFieldSettings>
                            <ListViewTemplates TValue="dtInvAccounts">
                                <HeaderTemplate>
                                    <table>
                                        <tr>
                                            <th style="width:95px;">Code</th>
                                            <th style="width:220px">Name</th>
                                        </tr>
                                    </table>
                                </HeaderTemplate>
                                <Template Context="context">
                                    <table>
                                        <tr @onclick="(e => OnSelect(context as dtInvAccounts))">
                                            <td style="width: 95px; font-size: 12px">@((context as dtInvAccounts).AccountCode)</td>
                                            <td style="width: 220px; font-size: 11px">@((context as dtInvAccounts).AccountName)</td>
                                        </tr>
                                    </table>
                                </Template>
                            </ListViewTemplates>
                        </SfListView>
                    </PopupContent>
                </SfDropDownButton>
            </div>
        </div>
        <div class="row">
            @if (more == true)
            {
                <div class="col-md-3">
                    <label>Narration:</label>
                    <SfTextBox @bind-Value="@CommnNarration" CssClass="textbox" Placeholder=" Narration" Enabled="@EnbleRemark"></SfTextBox>
                </div>
                <div class="col-md-3">
                    <label>Description:</label>
                    <SfTextBox @bind-Value="@Descrptn" CssClass="textbox" Placeholder="Description" Enabled="@EnbleRemark"></SfTextBox>
                </div>
                <div class="col-md-3">
                    <label>Remark:</label>
                    <SfTextBox CssClass="textbox" @bind-Value="@Remark" Placeholder="Remark" Enabled="@EnbleRemark"></SfTextBox>
                </div>
            }
        </div>

</div>





<div>
    <div class="box-card-shadow">
        <div class="pl-2" style="background-color:#E8EEFA; height: 28px;">
            <label style="font-size:medium;color:#0a1971">Payment Details</label>
        </div>
        <div class="pt-1">
            <div>
                <SfTab CssClass="e-tab-custom-class" AllowDragAndDrop="true" @ref="Tab">
                    <TabAnimationSettings>
                        <TabAnimationPrevious Effect="Syncfusion.Blazor.AnimationEffect.None"></TabAnimationPrevious>
                        <TabAnimationNext Effect="Syncfusion.Blazor.AnimationEffect.None"></TabAnimationNext>
                    </TabAnimationSettings>
                    @if (mode == "New")
                    {
                        <TabEvents Selected="OnTabSelected"> </TabEvents>
                    }
                    <TabItems>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Cash"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @if (mode == "New" || mode == "View" || mode == "Edit")
                                {
                                    btnTT = 0;
                                    btnCash = 1;
                                    btnCard = 0;
                                    btnCheque = 0;
                                    <SfGrid DataSource="@cashnullobj" GridLines="GridLine.Both" AllowPaging="false" ID="Gridnew" @ref="Gridnew" AllowSelection="@EditEnable" RowHeight="24">
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Normal" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
                                        <GridEvents OnActionBegin="OnActionBegin" TValue="Cheque"></GridEvents>
                                        <GridColumns>
                                            <GridColumn Width="25px" TextAlign="TextAlign.Center" Visible="@DeleteVisble">
                                                <Template>
                                                    @{
                                                        var chq = (context as Cheque);
                                                        if (chq.Status != "newAftrProceed")
                                                        {
                                                            <a @onclick="@(async() => {await CashOnRowRemoving(chq); })" title="Delete"><img src="Images/Trash.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ID) IsPrimaryKey="true" DefaultValue="@y" Visible="false" Width="140"> </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankID) Visible="false" Width="150" DefaultValue="@(ObAccountCash.BankID)">

                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankName) HeaderText="Account Name" Width="150" EditType="EditType.DropDownEdit" TextAlign="TextAlign.Left">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListcash" TValue="int" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" AllowCustom="false"
                                                                @bind-Value="@((context as Cheque).BankID)" Enabled="true">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="Amount" HeaderTextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules { Required = true })" EditType="EditType.NumericEdit" Format="0.00" Width="140" TextAlign="TextAlign.Right" DefaultValue="@DefaultBalace">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="Amount" ShowSpinButton=false @bind-Value="@((context as Cheque).Amount)"></SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="160" DefaultValue="@CashDes">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="Description" @onkeydown="@(e=>Keydo(e,"cash"))" @bind-Value="@((context as Cheque).Description)" Placeholder="@CashDes"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                                else
                                {
                                    <SfGrid DataSource="@cashViewDetails" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="Grid1" @ref="cashGrid" RowHeight="24">
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Batch"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(Cheque.ID) IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Trantype) Visible="false" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankName) HeaderText="Account Name" Width="150" EditType="EditType.DropDownEdit">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListcash" TValue="string" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@ObAccountCash.BankName" Enabled="false">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="Amount" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.NumericEdit" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="140" Format="0.00"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="160"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Cheque"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @if (mode == "New" || mode == "View" || mode == "Edit")
                                {
                                    btnTT = 0;
                                    btnCash = 0;
                                    btnCard = 0;
                                    btnCheque = 1;
                                    <SfGrid DataSource="@chequenullobj" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="GridnewCheque" @ref="GridnewCheque" RowHeight="24">
                                        <GridEvents OnActionBegin="OnActionBegin" TValue="Cheque"></GridEvents>
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Normal" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Width="25px" TextAlign="TextAlign.Center" Visible="@chqDeleteVisble">
                                                <Template>
                                                    @{ var chq = (context as Cheque);
                                                        if (chq.Status != "newAftrProceed")
                                                        {
                                                            <a @onclick="@(async() => { await ChqOnRowRemoving(chq); })" title="Delete"><img src="Images/Trash.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ID) DefaultValue="@y" IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="Cheque No" Width="150" ValidationRules="@(new ValidationRules{ Required=true})">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="ChequeNo" @bind-Value="@((context as Cheque).ChequeNo)"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeDate) HeaderText="Date" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules{ Required=true})" Width="160">
                                                <EditTemplate>
                                                    <SfDatePicker @bind-Value="@((context as Cheque).ChequeDate)" Format="dd/MM/yyyy" @ref="@DateObj">
                                                        <DatePickerEvents TValue="DateTime?" Focus="FocusHandler"></DatePickerEvents>
                                                    </SfDatePicker>
                                                </EditTemplate>
                                            </GridColumn>
                                            @* <GridColumn Field=@nameof(Cheque.BankName) HeaderText="Bank Name" Width="120" ValidationRules="@(new ValidationRules{ Required=true})">
                                                    <EditTemplate>
                                                        <div>
                                                            <SfTextBox ID="BankName" @bind-Value="@((context as Cheque).BankName)"></SfTextBox>
                                                        </div>
                                                    </EditTemplate>
                                                </GridColumn>*@


                                            <GridColumn Field=@nameof(Cheque.BankName) HeaderText="Bank Name" Width="120" ValidationRules="@(new ValidationRules{ Required=true})">
                                                <EditTemplate>
                                                    <div>
                                                        <SfAutoComplete TValue="string" TItem="BankNames" Placeholder="" DataSource="@LocalData" @bind-Value="@((context as Cheque).BankName)" PopupWidth="250px">
                                                            <AutoCompleteFieldSettings Value="Name" />
                                                        </SfAutoComplete>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>

                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="Amount" HeaderTextAlign="TextAlign.Left" Format="0.00" EditType="EditType.NumericEdit" TextAlign="TextAlign.Right" Width="100" ValidationRules="@(new ValidationRules{ Required=true})" DefaultValue="@DefaultBalace">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="Amount" ShowSpinButton=false @bind-Value="@((context as Cheque).Amount)" ValidationRules="@(new ValidationRules{ Required=true})"></SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankID) Visible="false" Width="150" DefaultValue="@(ObAccountCheque.BankID)"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Bank/Pdc Account" Width="150" EditType="EditType.DropDownEdit">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListchq" TValue="int" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@((context as Cheque).BankID)" Enabled="true">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="190" DefaultValue="@ChqDes">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="Description" @onkeydown="@(e=>KeydoCheque(e))" @bind-Value="@((context as Cheque).Description)" Placeholder="@ChqDes"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                                else
                                {
                                    <SfGrid DataSource="@chqViewDetails" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="Grid2" @ref="chqGrid">
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Batch"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(Cheque.ID) IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="Cheque No" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeDate) HeaderText="Date" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankName) HeaderText="Bank Name" ValidationRules="@(new ValidationRules{ Required=true})" Width="120"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="Amount" HeaderTextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.NumericEdit" Format="C2" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="190"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Bank/Pdc Account" ValidationRules="@(new ValidationRules{ Required=true})" Width="150" EditType="EditType.DropDownEdit">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListchq" TValue="string" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@ObAccountCheque.PartyName" Enabled="false">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="Card"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @if (mode == "New" || mode == "View" || mode == "Edit")
                                {
                                    btnCard = 1;
                                    btnCash = 0;
                                    btnCheque = 0;
                                    btnTT = 0;
                                    <SfGrid DataSource="@cardnullobj" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="GridnewCard" @ref="GridnewCard" RowHeight="24">
                                        <GridEvents OnActionBegin="OnActionBegin" RowSelected="RowSelectHandler" Created="CardCreatedHandler" TValue="Cheque"></GridEvents>
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Normal" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Width="25px" TextAlign="TextAlign.Center" Visible="@cardDeleteVisble">
                                                <Template>
                                                    @{ var chq = (context as Cheque);
                                                        if (chq.Status != "newAftrProceed")
                                                        {
                                                            <a @onclick="@(async() => {await CardOnRowRemoving(chq); })" title="Delete"><img src="Images/Trash.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ID) DefaultValue="@y" IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.CardID) Visible="false" Width="150" DefaultValue="@(ObAccountcard.CardID)"></GridColumn>

                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="Card" Width="150">
                                                <EditTemplate>
                                                    <div>
                                                        <SfComboBox DataSource="@CardList" TValue="long" TItem="Cards"
                                                                    EnableVirtualization=" true" AllowFiltering="true"
                                                                    CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                    @bind-Value="@((context as Cheque).CardID)" Enabled="true">
                                                            <ComboBoxFieldSettings Text="Description" Value="ID"></ComboBoxFieldSettings>
                                                        </SfComboBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.IntAmount) Format="0.00" HeaderText="Amount" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="160" ValidationRules="@(new ValidationRules{ Required=true})" DefaultValue="@(defCommsn)">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="IntAmount" @ref="IntAmount" ShowSpinButton=false OnChange="CardValueChangeHandler" @bind-Value="@((context as Cheque).IntAmount)"></SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Commission) HeaderText="Comm.(%)" Width="120" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" DefaultValue="@(defCommsn)" Format="0.00">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="Commission" OnChange="CommisionValueChange" ShowSpinButton=false @bind-Value="@((context as Cheque).Commission)">
                                                        </SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="TotAmount" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="140" Format="0.00">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="TotAmount" ShowSpinButton=false @bind-Value="@cardTotAmount1" Enabled=false></SfNumericTextBox>
                                                    </div>
                                                    @{
                                                        try
                                                        {
                                                            var value = (context as Cheque);
                                                            if (value.Commission == null)
                                                            {
                                                                value.Amount = value.IntAmount;
                                                            }
                                                            else
                                                            {
                                                                var totAmount = value.IntAmount * ((100 + value.Commission) / 100);
                                                                value.Amount = totAmount;
                                                            }
                                                        }
                                                        catch (Exception e)
                                                        {
                                                            Console.WriteLine(e.Message);
                                                        }
                                                    }
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankID) Visible="false" Width="150" DefaultValue="@(ObAccountcard.BankID)"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Account Name" Width="130">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListcard" TValue="int" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@((context as Cheque).BankID)" Enabled="true">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="190" DefaultValue="@CardDes">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="Description" @bind-Value="@((context as Cheque).Description)" Placeholder="@CardDes"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.CardType) HeaderText="CardNo" Width="100">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="CardType" ShowSpinButton=false @onkeydown="@(e=>Keydo(e,"card"))" @bind-Value="@((context as Cheque).CardType)"></SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                                else
                                {
                                    <SfGrid DataSource="@cardViewDetails" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="Grid3" @ref="cardGrid" RowHeight="24">
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Batch"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(Cheque.ID) IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="Card" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.IntAmount) HeaderText="Amount" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Commission) HeaderText="Comm.(%)" HeaderTextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules{ Required=true})" Width="120" TextAlign="TextAlign.Right"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="TotAmount" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.NumericEdit" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Account Name" ValidationRules="@(new ValidationRules{ Required=true})" Width="130">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListcard" TValue="string" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@ObAccount.AccountName" Enabled="false">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="190"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.CardType) HeaderText="CardNo" ValidationRules="@(new ValidationRules{ Required=true})" Width="100"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                            </ContentTemplate>
                        </TabItem>
                        <TabItem>
                            <ChildContent>
                                <TabHeader Text="TT"></TabHeader>
                            </ChildContent>
                            <ContentTemplate>
                                @if (mode == "New" || mode == "View" || mode == "Edit")
                                {
                                    btnTT = 1;
                                    btnCash = 0;
                                    btnCard = 0;
                                    btnCheque = 0;
                                    <SfGrid DataSource="@ttnullobj" GridLines="GridLine.Both" AllowPaging="false" AllowSelection="@EditEnable" ID="GridnewTt" @ref="GridnewTt" RowHeight="24">
                                        <GridEvents OnActionBegin="OnActionBegin" TValue="Cheque"></GridEvents>
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Normal" ShowConfirmDialog="false" NewRowPosition="NewRowPosition.Bottom"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Width="25px" TextAlign="TextAlign.Center" Visible="@ttDeleteVisble">
                                                <Template>
                                                    @{ var chq = (context as Cheque);
                                                        if (chq.Status != "newAftrProceed")
                                                        {
                                                            <a @onclick="@(async() => {await TtOnRowRemoving(chq); })" title="Delete"><img src="Images/Trash.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                        }
                                                    }
                                                </Template>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ID) DefaultValue="@y" IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="TTNo" Width="150" ValidationRules="@(new ValidationRules{ Required=true})">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="ChequeNo" @bind-Value="@((context as Cheque).ChequeNo)"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeDate) HeaderText="TTDate" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="160">
                                                <EditTemplate>
                                                    <SfDatePicker @bind-Value="@((context as Cheque).ChequeDate)" @ref="@DateObjTT">
                                                        <DatePickerEvents TValue="DateTime?" Focus="FocusHandlerTT"></DatePickerEvents>
                                                    </SfDatePicker>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.BankID) Visible="false" Width="150" DefaultValue="@(ObAccountTt.BankID)"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Account Name" Width="150">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListtt" TValue="int" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@((context as Cheque).BankID)" Enabled="true">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="TotAmount" Format="0.00" HeaderTextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules { Required = true })" EditType="EditType.NumericEdit" TextAlign="TextAlign.Right" Width="140" DefaultValue="@DefaultBalace">
                                                <EditTemplate>
                                                    <div>
                                                        <SfNumericTextBox ID="Amount" ShowSpinButton=false @bind-Value="@((context as Cheque).Amount)" ValidationRules="@(new ValidationRules{ Required=true})"></SfNumericTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="160" DefaultValue="@TtDes">
                                                <EditTemplate>
                                                    <div>
                                                        <SfTextBox ID="Description" @onkeydown="@(e=>Keydo(e,"tt"))" @bind-Value="@((context as Cheque).Description)" Placeholder="@TtDes"></SfTextBox>
                                                    </div>
                                                </EditTemplate>
                                            </GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                                else
                                {
                                    <SfGrid DataSource="@ttViewDetails" AllowPaging="false" ID="Grid4" @ref="ttGrid" AllowSelection="@EditEnable" RowHeight="24" GridLines="GridLine.Both">
                                        <GridEditSettings AllowAdding="@EditEnable" AllowDeleting="@EditEnable" AllowEditing="@EditEnable" Mode="EditMode.Batch"></GridEditSettings>
                                        <GridColumns>
                                            <GridColumn Field=@nameof(Cheque.ID) IsPrimaryKey="true" Visible="false" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeNo) HeaderText="TTNo" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.ChequeDate) HeaderText="TTDate" EditType="EditType.DatePickerEdit" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="160"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.PartyName) HeaderText="Account Name" ValidationRules="@(new ValidationRules{ Required=true})" Width="150">
                                                <EditTemplate>
                                                    <SfComboBox DataSource="@AccountListtt" TValue="string" TItem="AccountList"
                                                                EnableVirtualization=" true" AllowFiltering="true"
                                                                CssClass="textbox" Placeholder="" AllowCustom="false"
                                                                @bind-Value="@ObAccount.AccountName" Enabled="false">
                                                        <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                                                    </SfComboBox>
                                                </EditTemplate>
                                            </GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Amount) HeaderText="TotAmount" HeaderTextAlign="TextAlign.Left" ValidationRules="@(new ValidationRules{ Required=true})" EditType="EditType.NumericEdit" TextAlign="TextAlign.Right" Width="140"></GridColumn>
                                            <GridColumn Field=@nameof(Cheque.Description) HeaderText="Description" TextAlign="TextAlign.Left" Width="160"></GridColumn>
                                        </GridColumns>
                                    </SfGrid>
                                }
                            </ContentTemplate>
                        </TabItem>
                    </TabItems>
                </SfTab>
            </div>
            @if (mode == "New" || mode == "Edit")
            {
                <div class="form-row" style="padding-top:5px;">
                    <div class="col-md-6">
                        <SfButton @onclick="Proceed_Click" IconCss="Icon proceed" CssClass="e-btn" title="Proceed" Content="Proceed" style="width:90px;padding:1px 3px" />
                        <SfButton @onclick="Clear_Click" IconCss="Icon cancel" CssClass="e-btn" title="Cancel" Content="Cancel" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<div>
    <div class="box-card-shadow">
        <div class="pl-2" style="background-color:#E8EEFA; height: 28px;">
            <label style="font-size:medium;color:#0a1971">Bills</label>
            <a style="text-decoration: none; cursor: pointer; float: right; padding-right: 5px;" title="@lblDefaultBtn" @onclick="@Bill_Default">
                <img src="images/MoreIcon.png" style="height:17px;width:17px;" />
            </a>
        </div>
        <div class="pt-1">
            <div class="form-row">
                <div class="col-md-12" style="position: inherit;">
                    @if (vallobj == null || vallobj.Count == 0)
                    {
                        <p><em>No data...</em></p>
                    }
                    else
                    {
                        if (mode == "New" || mode == "Edit")
                        {
                            <SfGrid DataSource="@vallobj"
                                    ID="Grid"
                                    GridLines="GridLine.Both"
                                    @ref="gv_VoucherAllocation1"
                                    AllowPaging="false"
                                    Width="100%"
                                    Height="@gridHeight"
                                    AllowResizing="true"
                                    AllowSorting="true"
                                    EnableAltRow="true"
                                    EnablePersistence="@GridPer"
                                    RowHeight="24">
                                <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" EnableToggle=true></GridSelectionSettings>
                                <GridEvents OnDataBound="DataBoundHandler" RowSelecting="RowSelectingHandler" RowSelected="RowSelectHandler" RowDeselecting="RowDeselectingHandler" RowDeselected="NewRowDeselectHandler" TValue="VoucherAllocation"></GridEvents>
                                <GridPageSettings PageCount="200"></GridPageSettings>
                                <GridColumns>
                                    @if (mode == "Edit" || mode == null || mode == "New" || mode == "View")
                                    {
                                        <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Index="1" Width="30">
                                        </GridColumn>
                                    }
                                    <GridColumn Field=@nameof(VoucherAllocation.ID) IsPrimaryKey="true" Visible="false" Width="90" Index="2"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.VID) Visible="false" Width="90" Index="3"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.VNo) HeaderText="VNo" Width="90" Index="4"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.RefNo) HeaderText="Ref No" Width="120" Index="5"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Date) HeaderText="Date" Width="150" Format='dd/MM/yyyy' Index="6"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Amount) HeaderText="Amount" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="7"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Paid) HeaderText="Paid" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="8"></GridColumn>
                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Receipt) HeaderText="Receipt" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="9">
                                            <Template>
                                                @{
                                                    var rec = (context as VoucherAllocation).Receipt;
                                                    changeReceipt = decimal.Parse(rec.ToString()).ToString("0.00");
                                                    <SfTextBox Value="@changeReceipt" HtmlAttributes="@RightAlignTextbox" Input="OnReceiptInputHandler" Enabled="false" ValueChanged="OnReceiptTextChangedHandler" CssClass="textbox inuptTextbox"></SfTextBox>
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Receipt) HeaderText="Receipt" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="9"></GridColumn>
                                    }

                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Balance) HeaderText="Balance" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="10">
                                            <Template>
                                                @{
                                                    var bal = (context as VoucherAllocation).Balance;
                                                    changeBalance = decimal.Parse(bal.ToString()).ToString("0.00");
                                                    <SfTextBox @bind-Value="@changeBalance" HtmlAttributes="@RightAlignTextbox" Enabled="false" CssClass="textbox inuptTextbox"></SfTextBox>
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Balance) HeaderText="Balance" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="10"></GridColumn>
                                    }
                                    <GridColumn Field=@nameof(VoucherAllocation.Description) HeaderText="Description" Width="130" Index="11"></GridColumn>
                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Cash) HeaderText="Cash" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="11">

                                            <Template>
                                                @{
                                                    if (ChkBill == 1 && Cashmode == 1)
                                                    {
                                                        var cash = (context as VoucherAllocation).Cash;
                                                        <SfNumericTextBox ShowSpinButton=false Value="cash" TValue="decimal?"></SfNumericTextBox>
                                                    }
                                                    else
                                                    {
                                                        var cash = (context as VoucherAllocation).Cash;

                                                        <SfNumericTextBox Value="cash" ShowSpinButton=false OnChange="OnCashTextChangedHandler" TValue="decimal?"></SfNumericTextBox>
                                                        void OnCashTextChangedHandler(Microsoft.AspNetCore.Components.ChangeEventArgs args)
                                                        {

                                                            var cashamt = Convert.ToDecimal(amtdt.Where(x => x.Type == "Cash").Sum(x => x.Amount));
                                                            var vAlloctn = (context as VoucherAllocation);
                                                            if (vAlloctn.Cheque == null) vAlloctn.Cheque = 0;
                                                            if (vAlloctn.TT == null) vAlloctn.TT = 0;
                                                            if (vAlloctn.Cash == null) vAlloctn.Cash = 0;
                                                            var totalAmt = vAlloctn.Cash + vAlloctn.Cheque + vAlloctn.TT;
                                                            if (totalAmt == null)
                                                                totalAmt = 0;
                                                            if (totalAmt <= (context as VoucherAllocation).Receipt)

                                                            {

                                                                var casRemng = cashamt - Convert.ToDecimal(vallobj.Where(x => x.Receipt != 0).Sum(x => x.Cash));
                                                                if (decimal.Parse((args.Value).ToString()) <= (context as VoucherAllocation).Receipt)
                                                                {


                                                                    if (decimal.Parse((args.Value).ToString()) > casRemng)
                                                                    {
                                                                        IsVisibleExd = true;
                                                                    }
                                                                    else
                                                                        (context as VoucherAllocation).Cash = decimal.Parse((args.Value).ToString());
                                                                }
                                                                else
                                                                    IsVisibleExd = true;


                                                            }
                                                            else
                                                                IsVisibleExd = true;
                                                        }
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Cash) HeaderText="Cash" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="11"></GridColumn>

                                    }
                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Cheque) HeaderText="Cheque" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="12">
                                            <Template>
                                                @{
                                                    if (ChkBill == 1 && Cashmode == 1)
                                                    {
                                                        var cash = (context as VoucherAllocation).Cheque;
                                                        <SfNumericTextBox ShowSpinButton=false Value="cash" TValue="decimal?"></SfNumericTextBox>
                                                    }
                                                    else
                                                    {
                                                        var cash = (context as VoucherAllocation).Cheque;

                                                        <SfNumericTextBox Value="cash" ShowSpinButton=false OnChange="OnChqTextChangedHandler" TValue="decimal?"></SfNumericTextBox>
                                                        void OnChqTextChangedHandler(Microsoft.AspNetCore.Components.ChangeEventArgs args)
                                                        {
                                                            var cashamt = Convert.ToDecimal(amtdt.Where(x => x.Type == "Cheque").Sum(x => x.Amount));
                                                            var vAlloctn = (context as VoucherAllocation);
                                                            if (vAlloctn.Cheque == null) vAlloctn.Cheque = 0;
                                                            if (vAlloctn.Cash == null) vAlloctn.Cash = 0;
                                                            if (vAlloctn.TT == null) vAlloctn.TT = 0;
                                                            var totalAmt = vAlloctn.Cash + vAlloctn.Cheque + vAlloctn.TT;
                                                            if (totalAmt == null)
                                                                totalAmt = 0;
                                                            if (totalAmt < (context as VoucherAllocation).Receipt)
                                                            {
                                                                var casRemng = cashamt - Convert.ToDecimal(vallobj.Where(x => x.Receipt != 0).Sum(x => x.Cheque));
                                                                if (decimal.Parse((args.Value).ToString()) <= (context as VoucherAllocation).Receipt)
                                                                {

                                                                    if (decimal.Parse((args.Value).ToString()) > casRemng)
                                                                    {
                                                                        IsVisibleExd = true;
                                                                    }
                                                                    else
                                                                        (context as VoucherAllocation).Cheque = decimal.Parse((args.Value).ToString());
                                                                }
                                                                else
                                                                    IsVisibleExd = true;

                                                            }
                                                            else
                                                                IsVisibleExd = true;
                                                        }
                                                    }
                                                }

                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Cheque) HeaderText="Cheque" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="12">
                                        </GridColumn>
                                    }
                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.TT) HeaderText="TT" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="13">
                                            <Template>
                                                @{
                                                    if (ChkBill == 1 && Cashmode == 1)
                                                    {
                                                        var cash = (context as VoucherAllocation).TT;
                                                        <SfNumericTextBox ShowSpinButton=false Value="cash" TValue="decimal?"></SfNumericTextBox>
                                                    }
                                                    else
                                                    {
                                                        var cash = (context as VoucherAllocation).TT;

                                                        <SfNumericTextBox Value="cash" ShowSpinButton=false OnChange="OnTTTextChangedHandler" TValue="decimal?"></SfNumericTextBox>
                                                        void OnTTTextChangedHandler(Microsoft.AspNetCore.Components.ChangeEventArgs args)
                                                        {
                                                            var cashamt = Convert.ToDecimal(amtdt.Where(x => x.Type == "TT").Sum(x => x.Amount));
                                                            var vAlloctn = (context as VoucherAllocation);
                                                            if (vAlloctn.Cheque == null) vAlloctn.Cheque = 0;
                                                            if (vAlloctn.Cash == null) vAlloctn.Cash = 0;
                                                            if (vAlloctn.TT == null) vAlloctn.TT = 0;
                                                            var totalAmt = vAlloctn.Cash + vAlloctn.Cheque + vAlloctn.TT;
                                                            if (totalAmt == null)
                                                                totalAmt = 0;
                                                            if (totalAmt <= (context as VoucherAllocation).Receipt)

                                                            {
                                                                var casRemng = cashamt - Convert.ToDecimal(vallobj.Where(x => x.Receipt != 0).Sum(x => x.TT));
                                                                if (decimal.Parse((args.Value).ToString()) <= (context as VoucherAllocation).Receipt)
                                                                {

                                                                    if (decimal.Parse((args.Value).ToString()) > casRemng)
                                                                    {
                                                                        IsVisibleExd = true;
                                                                    }
                                                                    else
                                                                        (context as VoucherAllocation).TT = decimal.Parse((args.Value).ToString());
                                                                }
                                                                else
                                                                    IsVisibleExd = true;

                                                            }
                                                            else
                                                                IsVisibleExd = true;
                                                        }
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    { <GridColumn Field=@nameof(VoucherAllocation.TT) HeaderText="TT" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="13">
                                        </GridColumn>
                                    }

                                </GridColumns>
                            </SfGrid>
                        }
                        else
                        {
                            <SfGrid DataSource="@vallobj"
                                    ID="Grid"
                                    GridLines="GridLine.Both"
                                    @ref="gv_VoucherAllocation"
                                    AllowPaging="false"
                                    Width="100%"
                                    Height="@gridHeight"
                                    AllowResizing="true"
                                    AllowSorting="true"
                                    EnableAltRow="true"
                                    AllowSelection="@AllwSelection"
                                    RowHeight="24">
                                @*RowSelected="RowSelectHandler" RowDeselected="NewRowDeselectHandler"*@
                                <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                <GridEvents Created="CreatedHandler" TValue="VoucherAllocation"></GridEvents>
                                <GridPageSettings PageCount="200"></GridPageSettings>
                                <GridColumns>
                                    @if (mode == "Edit" || mode == null || mode == "New" || mode == "View")
                                    {
                                        <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Index="1" Width="30"></GridColumn>
                                    }
                                    <GridColumn Field=@nameof(VoucherAllocation.ID) IsPrimaryKey="true" Visible="false" Width="90" Index="2"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.VID) Visible="false" Width="90" Index="3"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.VNo) HeaderText="VNo" Width="90" Index="4"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.RefNo) HeaderText="Ref No" Width="120" Index="5"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Date) HeaderText="Date" Width="150" Format='dd/MM/yyyy' Index="6"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Amount) HeaderText="Amount" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="7"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Paid) HeaderText="Paid" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="8"></GridColumn>
                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Receipt) HeaderText="Receipt" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="9">
                                            <Template>
                                                @{
                                                    var rec = (context as VoucherAllocation).Receipt;
                                                    changeReceipt = decimal.Parse(rec.ToString()).ToString("0.00");
                                                    <SfTextBox Value="@changeReceipt" HtmlAttributes="@RightAlignTextbox" Input="OnReceiptInputHandler" ValueChanged="OnReceiptTextChangedHandler" CssClass="textbox"></SfTextBox>
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Receipt) HeaderText="Receipt" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="9"></GridColumn>
                                    }

                                    @if (ChkBill == 1)
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Balance) HeaderText="Balance" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="10">
                                            <Template>
                                                @{
                                                    var bal = (context as VoucherAllocation).Balance;
                                                    changeBalance = decimal.Parse(bal.ToString()).ToString("0.00");
                                                    <SfTextBox @bind-Value="@changeBalance" HtmlAttributes="@RightAlignTextbox" Enabled="false" CssClass="textbox"></SfTextBox>
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                    else
                                    {
                                        <GridColumn Field=@nameof(VoucherAllocation.Balance) HeaderText="Balance" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="10"></GridColumn>
                                    }
                                    <GridColumn Field=@nameof(VoucherAllocation.Description) HeaderText="Description" Width="130" Index="11"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Cash) HeaderText="Cash" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="11"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.Cheque) HeaderText="Cheque" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="12"></GridColumn>
                                    <GridColumn Field=@nameof(VoucherAllocation.TT) HeaderText="TT" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00" Width="130" Index="13"></GridColumn>

                                </GridColumns>
                            </SfGrid>

                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    <div class="box-card-shadow">
        <div class="pl-2" style="background-color:#E8EEFA; height: 28px;">
            <label style="font-size:medium;color:#0a1971">Amount Details</label>
        </div>
        <div class="pt-1">
            <div class="form-row">
                <div class="col-md-9">
                    <div>
                        @if (amtdt == null)
                        {
                            <p><em>No data...</em></p>
                        }
                        else
                        {
                            <SfGrid DataSource="@amtdt" @ref="gv_Receipt"
                                    GridLines="GridLine.Both"
                                    AllowFiltering="false"
                                    AllowPaging="false"
                                    Width="100%"
                                    Height="50"
                                    AllowResizing="true"
                                    AllowSorting="true"
                                    EnableAltRow="true"
                                    AllowSelection="@EditEnable"
                                    RowHeight="24">
                                <GridPageSettings PageSize="100"></GridPageSettings>
                                <GridColumns>
                                    <GridColumn Field=@nameof(amtDetails.Type) HeaderText="Type" Width="100"></GridColumn>
                                    <GridColumn Field=@nameof(amtDetails.Description) HeaderText="Description" Width="150"></GridColumn>
                                    <GridColumn Field=@nameof(amtDetails.Amount) HeaderText="Amount" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00"></GridColumn>
                                    @if (EditEnable == true)
                                    {
                                        <GridColumn Width="25px" TextAlign="TextAlign.Center">
                                            <Template>
                                                @{ var _amtdt = (context as AmtDetails);
                                                    <a @onclick="@(() => { OnRowRemoving(_amtdt); })" title="Delete"><img src="Images/icons8-trash-32.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                }
                                            </Template>
                                        </GridColumn>
                                    }
                                </GridColumns>
                            </SfGrid>
                        }
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-row">
                        <div class="form-row" style="width: 100%;">
                            <div class="col-md-6">
                                <label style="font-size: small">Paid:</label>
                                <a style="text-decoration:none;cursor:pointer;" title="Receipt charges and deductions" @onclick="@MoreClickDiscount">
                                    <img src="images/more.png" style="height:30px;width:30px;" />
                                </a>
                            </div>
                            <div class="col-md-6">
                                <SfTextBox @bind-Value="@Paid" HtmlAttributes="@RightAlignTextbox" Enabled="@EditEnable" CssClass="e-custom" Placeholder="Paid"></SfTextBox>
                            </div>
                        </div>
                        @if (moreDis == true)
                        {
                            <div class="form-row" style="width: 100%;">
                                <div class="col-md-6">
                                    <SfComboBox DataSource="@CmbCharges" TValue="int" TItem="AccountList"
                                                EnableVirtualization=" true" AllowFiltering="true"
                                                CssClass="textbox" AllowCustom="false"
                                                Enabled="@EditEnable" Value="SelectChrgId" @ref="combchrg" title="Receipt Charges">
                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                        <ComboBoxEvents TItem="AccountList" TValue="int" ValueChange="ChargValueChangeHandler" Closed="@CloseHandler"></ComboBoxEvents>
                                    </SfComboBox>
                                </div>
                                <div class="col-md-6">
                                    <SfTextBox HtmlAttributes="@RightAlignTextbox" CssClass="e-custom" Input="ChargeInputHandler" Placeholder="" Value="@Charges" ValueChanged="ChargeValueChangeHandler" Enabled="@ChargEnable" @ref="TxtCharg" title="Amount"></SfTextBox>
                                </div>
                            </div>
                            <div class="form-row" style="width: 100%;">
                                <div class="col-md-6">
                                    <SfComboBox DataSource="@Cmbdeductions" TValue="int" TItem="AccountList"
                                                EnableVirtualization=" true" AllowFiltering="true"
                                                CssClass="textbox" AllowCustom="false"
                                                Enabled="@EditEnable" Value="@SelectDedId" title="Receipt Deductions" @ref="@combded">

                                        <ComboBoxFieldSettings Text="AccountName" Value="ID"></ComboBoxFieldSettings>
                                        <ComboBoxEvents TItem="AccountList" TValue="int" ValueChange="@DedValueChangeHandler" Closed="@CloseHandlerDed"></ComboBoxEvents>
                                    </SfComboBox>
                                </div>
                                <div class="col-md-6">
                                    <SfTextBox HtmlAttributes="@RightAlignTextbox" Value="@Discount" Input="InputHandler" ValueChanged="ValueChangeHandler" CssClass="e-custom" Placeholder="Discount" Enabled="@DedEnable" @ref="TxtDed" title="Amount"></SfTextBox>
                                </div>
                            </div>
                        }
                        <div class="form-row" style="width: 100%;">
                            <div class="col-md-6">
                                <label style="font-size: small">Total:</label>
                            </div>
                            <div class="col-md-6">
                                <SfTextBox @bind-Value="@Total" HtmlAttributes="@RightAlignTextbox" CssClass="e-custom" Enabled="@EditEnable" Placeholder="Total"></SfTextBox>
                            </div>
                        </div>
                        <div class="form-row" style="width: 100%;">
                            <div class="col-md-8">
                            </div>
                            <div class="col-md-4">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    <div class="box-card-shadow">
        <div class="pl-2" style="background-color:#E8EEFA; height: 23px;">
            <label style="font-size:medium;color:#0a1971"> </label>
        </div>
        <div class="pt-1">
            <div class="row" style="padding-top:.5rem;">
                <div class="col form-row">
                    <div class="col-md-6">
                        <label class="lblbold">Amount:</label>
                    </div>
                    <div class="col-md-6 lblbox">
                        <label class="lblbold">@Convert.ToDecimal(payableAmount).ToString("0.00")</label>
                    </div>
                </div>
                <div class="col form-row">
                    <div class="col-md-6">
                        <label class="lblbold">Paid:</label>
                    </div>
                    <div class="col-md-6 lblbox">
                        <label class="lblbold">@Convert.ToDecimal(Total).ToString("0.00")</label>
                    </div>
                </div>
                <div class="col form-row">
                    <div class="col-md-6">
                        <label class="lblbold">Balance:</label>
                    </div>
                    <div class="col-md-6 lblbox">
                        <label class="lblbold">@Convert.ToDecimal(balance).ToString("0.00")</label>
                    </div>
                </div>
                <div class="col form-row">
                    <div class="col-md-6">
                        <label class="lblbold">Alloted Amount:</label>
                    </div>
                    <div class="col-md-6 lblbox">
                        <label class="lblbold">@Convert.ToDecimal(Allocated).ToString("0.00")</label>
                    </div>
                </div>
                <div class="col form-row">
                    <div class="col-md-6">
                        <label class="lblbold">Difference:</label>
                    </div>
                    <div class="col-md-6 lblbox">
                        <label class="lblbold">@Convert.ToDecimal(difference).ToString("0.00")</label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@if (user != 0)
{
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupVisible" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:green">
                        Saved Successfully !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupVisible = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Something went wrong !!!
                    </p>
                    <p style="color:red">
                        Check Receipt No !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupSaveError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Something went wrong !!! Customer/Salesman missing or Connection error !!!
                    </p>
                    <p style="color:red">
                        Please check and try again !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupSaveError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupLoading" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:black">
                        Loading...
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupLoading = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
}

<div>
    <SfDialog Width="80%" Height="90%" IsModal="true" @bind-Visible="AccountSearch" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <SfTextBox @ref="search" Input="OnInput" Placeholder="Global Search" Width="100%" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch"></SfTextBox>
                </div>
                <div>
                    <SfGrid DataSource="@CustomerList"
                            GridLines="GridLine.Both"
                            @ref="AccGrid"
                            Height="100%" Width="100%"
                            AllowPaging="true"
                            AllowFiltering="true"
                            AllowResizing="true"
                            AllowReordering="true"
                            ShowColumnChooser="true"
                            EnablePersistence="true"
                            RowHeight="23">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="false"></GridFilterSettings>
                        <GridPageSettings PageSize="50"></GridPageSettings>
                        <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                        <GridTemplates>
                        </GridTemplates>
                        <GridColumns>
                            <GridColumn Field=@nameof(dtInvAccounts.ID) IsPrimaryKey="true" Index="1" Visible="false" AllowFiltering="false"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.AccountCode) HeaderText="Code" Index="2" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.AccountName) HeaderText="Name" Format="dd/MM/yyyy" Index="3" Width="300"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.ParentID) HeaderText="Parent" Index="4" Width="100"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.PerMobile) HeaderText="Mobile" Index="5" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(dtInvAccounts.Class) HeaderText="Class" Index="6" Width="100"></GridColumn>
                        </GridColumns>
                        <GridEvents RowSelecting="AccountRowSelectingHandler" TValue="dtInvAccounts"></GridEvents>
                    </SfGrid>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Cancel" CssClass="e-btn" @onclick="@(() => AccountSearch = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
</div>
<SfDialog Target="#target" Width="300px" ShowCloseIcon="true" @bind-Visible="IsVisibleExd" AllowPrerender="true" IsModal="true">
    <DialogTemplates>
        <Header> Alert </Header>
        <Content> Amount Exceed...!</Content>
    </DialogTemplates>
</SfDialog>
@code {
    [Parameter]
    public string Id { get; set; }

    //Syncfusion Declarations
    public SfTextBox TxtCharg;
    SfTab Tab;
    SfTextBox search;
    SfTextBox TxtDed { get; set; }
    SfTextBox amntCard { get; set; }
    SfNumericTextBox<decimal?> IntAmount { get; set; }
    SfComboBox<int, AccountList> combchrg;
    SfComboBox<int, AccountList> combded;
    SfComboBox<string, dtInvAccounts> SfCustomerObj;
    SfComboBox<string, string> SfAccCatObj;
    public SfGrid<dtInvAccounts> AccGrid;
    public SfGrid<AmtDetails> gv_Receipt { get; set; }
    public SfGrid<VoucherAllocation> gv_VoucherAllocation { get; set; }
    public SfGrid<VoucherAllocation> gv_VoucherAllocation1 { get; set; }
    public Query LocalDataQueryMemberCustomer { get; set; } = new Query().Take(20);
    private Dictionary<string, object> RightAlignTextbox { get; set; } = new Dictionary<string, object>() { { "style", "text-align-last: right;padding-right: 10px;" } };
    //Syncfusion Declarations

    //Common Declarations
    DateTime DateTimeValue { get; set; }
    DateTime Date = DateTime.Now;
    int ChequeIndex, CashIndex, AddPk, editI = 1, SelectDedId, SelectChrgId, btnCash, btnCheque, btnCard, btnTT, btnNew, ChkBill, BranchID, user, RID, vtype;
    long ChargeId, DedId, AccID, vID;
    public decimal defCommsn = 0;
    public decimal? DefaultBalace, RemainingCash = 0, RemainingCheque = 0, RemainingTt = 0;
    public double vNo;
    string AutoID, Value, Text, CustomerCombo, txtCustomerDetails, txtTTNo, txtCommission, cmbCard, txtChqNo, txtBankDetails, txtAmt, txtDescription, cmbAccName, txtPayMethod, ReceiptNo, Paid, Discount, Charges, Total, SearchReceiptNo,
    Allocated, payableAmount, balance, difference, mode, txtTTTotAmount, txtTTDescription, txtCardAmount, txtCardNo, txtCardDescription, txtCardTotAmount, txtChqDescription, txtChqTotAmount, AccSaveCheck, value, vaselect, DiscChanged,
    changeReceipt, changeBalance, ReceiptTot, GetVtype, CustList = "", lblDefaultBtn = "Default", CommnNarration = "Payment Received", Descrptn = "Amount Received Ref:", Username, gridHeight = "100", btnBill = "Detailed", CashAccSelected,
    CashDes = "Cash Received", ChqDes = "Cheque Received", CardDes = "Card Received", TtDes = "TT Received", BefrEditAlloct, bfrEditDiff, DefAccCat, Remark;
    bool PopupError { get; set; }
    bool PopupLoading { get; set; }
    bool PopupVisible { get; set; }
    bool PopupSaveError { get; set; }
    bool btnEnable { get; set; }
    public bool chechValid { get; set; } = true;
    bool CashEdit = false, CashEnterd = false, ChqEnterd = false, CardEnterd = false, TtEnterd = false, DedEnable = false, ChargEnable = false, more = false, moreDis = false, GridPer = false, Isload = false, btnNEW = true, btnsave = true,
        btnpdf = false, btnprint = false, btnedit = false, EditEnable = false, custFound = true, isSave = false, isCustmr = false, firstload = false, allocatnErr = false, cashfistload = true, cashscndload = false, Headchecked = false,
        AccountSearch = false, BillDefault = true, IsVisibleExd = false, AllwSelection = true;
    //Common Declarations

    //Object Declarations
    object CashDetails, ReceiptBal;
    IEnumerable<string> Name = new List<string>() { "Test1", "Test2", };
    VEntry ve = new VEntry();
    Cheque chq = new Cheque();
    dtInvAccounts ObCustomer = new dtInvAccounts();
    VoucherAllocation va = new VoucherAllocation();
    AccountList ObAccount = new AccountList();
    Cheque ObAccountCash = new Cheque();
    Cheque ObAccountCheque = new Cheque();
    Cheque ObAccountTt = new Cheque();
    Cheque ObAccountcard = new Cheque();
    AccountList ObAccountCard = new AccountList();
    AccountList ObAccountTT = new AccountList();
    public Voucher ObVoucher = new Voucher();
    VoucherAllocation vaDetails = new VoucherAllocation();
    AmtDetails amtDetails = new AmtDetails();
    Cards ObCardlist = new Cards();

    public IList<Cards> CardList = new List<Cards>();
    public IList<Cards> CardList2 = new List<Cards>();
    public IList<dtInvAccounts> CustomerList = new List<dtInvAccounts>();
    public List<string> AccCatgoryList = new List<string> { "Student", "Customer", "Supplier", "Staff" };
    public IList<AccountList> AccountList = new List<AccountList>();
    public IList<VoucherAllocation> vaObj = new List<VoucherAllocation>();
    public IList<Cheque> chqObj = new List<Cheque>();
    public IList<Cheque> chqDetails = new List<Cheque>();
    public IList<dtfinVEntry> veObj = new List<dtfinVEntry>();
    public ICollection<VoucherAllocation> vallSelected = new Collection<VoucherAllocation>();
    public dtInvVoucherEntry[] dtVoucherEntry;
    public List<VoucherAllocation> vallobj { get; set; }
    public List<VoucherAllocation> vallobjEdit = new List<VoucherAllocation>();
    readonly ObservableCollection<dtInvVoucherEntry> objVE = new ObservableCollection<dtInvVoucherEntry>();
    public ObservableCollection<AmtDetails> amtdt = new ObservableCollection<AmtDetails>();
    // public ObservableCollection<Cheque> DedChglist = new ObservableCollection<Cheque>();
    public ObservableCollection<Cheque> chklist = new ObservableCollection<Cheque>();
    public ObservableCollection<dtfinVoucherAllocation> VAllocationlist = new ObservableCollection<dtfinVoucherAllocation>();
    //public ObservableCollection<dtfinVEntry> dtVoucherEntryOld = new ObservableCollection<dtfinVEntry>();
    public IList<dtfinVEntry> dtVoucherEntryOld = new List<dtfinVEntry>();
    public AmtDetails[] CheqVE;
    public dtfinVEntry[] returnVE;
    public IList<AccountList> CmbCharges = new List<AccountList>();
    public IList<AccountList> Cmbdeductions = new List<AccountList>();
    public IList<Cheque> chqViewDetails = new List<Cheque>();
    public IList<Cheque> cashViewDetails = new List<Cheque>();
    public IList<Cheque> cardViewDetails = new List<Cheque>();
    public IList<Cheque> ttViewDetails = new List<Cheque>();
    public IList<dtInvAccounts> SibList = new List<dtInvAccounts>();
    List<BankNames> LocalData = new List<BankNames>
{
        new BankNames() { Name = "Abu Dhabi Commercial Bank (ADCB)" },

        new BankNames() { Name = "Ajman Bank" },
        new BankNames() { Name = "Al Hilal Bank" },
        new BankNames() { Name = "Bank of Sharjah" },
        new BankNames() { Name = "Dubai Islamic Bank" },
        new BankNames() { Name = "Emirates Investment Bank" },
        new BankNames() { Name = "Emirates Islamic" },
        new BankNames() { Name = "Emirates NBD" },
        new BankNames() { Name = "First Abu Dhabi Bank (FAB)" },
        new BankNames() { Name = "National Bank of Fujairah (NBF)" },
        new BankNames() { Name = "National Bank of Ras Al Khaimah (RAKBANK)" },
        new BankNames() { Name = "Abu Dhabi Islamic Bank (ADIB)" },
        new BankNames() { Name = "Commercial Bank of Dubai (CBD)" },
        new BankNames() { Name = "Mashreq Bank" },
        //new BankNames() { Name = "Abu Dhabi Commercial Bank" },
        //new BankNames() { Name = "Abu Dhabi Commercial Bank" },
        //new BankNames() { Name = "Abu Dhabi Commercial Bank" },
        //new BankNames() { Name = "Abu Dhabi Commercial Bank" },
        //new BankNames() { Name = "Abu Dhabi Commercial Bank" },

    };
    public SfGrid<Cheque> cashGrid { get; set; }
    public SfGrid<Cheque> chqGrid { get; set; }
    public SfGrid<Cheque> cardGrid { get; set; }
    public SfGrid<Cheque> ttGrid { get; set; }

    public SfGrid<Cheque> Gridnew { get; set; }
    public SfGrid<Cheque> GridnewCheque { get; set; }
    public SfGrid<Cheque> GridnewCard { get; set; }
    public SfGrid<Cheque> GridnewTt { get; set; }

    public decimal cardTotAmount = 0, cardTotAmount1 = 0;

    public IList<AccountList> AccountListchq = new List<AccountList>();
    public IList<AccountList> AccountListcash = new List<AccountList>();
    public IList<AccountList> AccountListtt = new List<AccountList>();
    public IList<AccountList> AccountListcard = new List<AccountList>();

    //Set primary key null grid objects
    public int y = 1, Cashmode = 0;
    public int selectedAccID;
    public bool DeleteVisble = false;
    public bool cardDeleteVisble = false;
    public bool ttDeleteVisble = false;
    public bool chqDeleteVisble = false;
    public bool EditInit = false;
    public bool DataboundFlag = false, CashPrcd = false, ChqPrcd = false, TtPrcd = false, CrdPrcd = false, EnbleRemark = true;

    public IList<Cheque> cashnullobj = new List<Cheque>();
    public IList<Cheque> chequenullobj = new List<Cheque>();
    public IList<Cheque> cardnullobj = new List<Cheque>();
    public IList<Cheque> ttnullobj = new List<Cheque>();

    SfDatePicker<DateTime?> DateObj;
    SfDatePicker<DateTime?> DateObjTT;
    SfTextBox bankName;

    public IList<Cheque> cashadded = new List<Cheque>();
    //Object Declarations

    //Initialize
    protected override async Task OnInitializedAsync()
    {
        user = await sessionStorage.GetItemAsync<int>("UserID");
        BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
        Username = await sessionStorage.GetItemAsync<string>("Username");
        GetVtype = await sessionStorage.GetItemAsync<string>("Vtype");

        AccountListcash = (await _IAccountList.GetAccounts("Cash", BranchID, user)).ToList();
        AccountListchq = (await _IAccountList.GetAccounts("PDC Received", BranchID, user)).ToList();
        AccountListcard = (await _IAccountList.GetAccounts("Card", BranchID, user)).ToList();
        AccountListtt = (await _IAccountList.GetAccounts("TT", BranchID, user)).ToList();

        Discount = "0.00";
        Charges = "0.00";

        CmbCharges = (await _IAccountList.GetAccounts("Receipt Charges", BranchID, user)).ToList();
        Cmbdeductions = (await _IAccountList.GetAccounts("Receipt Deductions", BranchID, user)).ToList();
        btnNew = 0;
        if (user == 0)
        {
            uriHelper.NavigateTo("Login");
        }
        else
        {
            DefAccCat = AccCatgoryList[0];
            CustomerList = (await _IInvAccounts.GetAccountsByCategoryReceipt(DefAccCat, BranchID)).ToList();
            CardList = (await _ICardList.GetCards()).ToList();
            RID = 0;
            if (Id != null)
                RID = int.Parse(Id);
            vtype = await finServ.getVtype(GetVtype);
            await sessionStorage.SetItemAsync("LocalSessionvType", vtype);
            btnEnable = true;
            vID = 0;
            if (RID != 0)
                vID = RID;
            else
                vID = await _IVoucherMasterManager.ListById(vtype, user);//await Http.GetJsonAsync<long>("/api/VoucherMasters/" + vtype + "/" + user);
            if (vID == 0)
            {
                await New_Click();
            }
            else
            {
                if (RID == 0)
                {
                    await New_Click();
                }
                else
                {
                    AutoID = vID.ToString();
                    await init();
                }
            }
        }
    }
    //Initialize
    public void RowSelectHandler(RowSelectEventArgs<Cheque> args)
    {
        ChequeIndex = int.Parse(args.RowIndex.ToString());
        // cardTotAmount = 0;
    }
    //New Events
    public async Task init()
    {
        mode = "View";
        btnNEW = false;
        btnedit = false;
        btnsave = true;
        cashnullobj.Clear();
        chequenullobj.Clear();
        ttnullobj.Clear();
        cardnullobj.Clear();
        amtdt.Clear();
        chqObj.Clear();
        EnbleRemark = false;
        //await TxtCharg.FocusOutAsync();
        ObVoucher = (await _VoucherManager.ShowVoucher(vID));
        AccID = ObVoucher.AccountID;
        CustList = ObVoucher.AccountName;
        CustomerCombo = ObVoucher.AccountName;
        ReceiptNo = ObVoucher.VNo;
        DateTimeValue = ObVoucher.VDate.Value;
        CommnNarration = ObVoucher.CommonNarration;
        Remark = ObVoucher.Remark;
        await InvokeAsync(StateHasChanged);
        //vallobj = (await _AccountAllocationManager.AccountAllocation(AccID, vID)).ToList();
        vallobj = (await _VoucherAllocationManager.ShowAllocation(AccID, vID)).ToList();
        ReceiptBal = await ReceiptServ.GetBalance(AccID, BranchID);
        veObj = (await _VEntryManager.Show(vID)).ToList();
        //Check Details
        chqObj = null;
        chqObj = (await _ChequeManager.ShowCheque(vID)).ToList();

        foreach (var item1 in chqObj)
        {
            if (item1.Trantype == "Cash")
            {
                foreach (var vitem in veObj)
                {
                    if (vitem.ChequeID == item1.ID)
                    {
                        Cheque cashCheq = new Cheque();
                        cashCheq.Amount = item1.Amount;
                        cashCheq.VEID = vitem.ID;
                        cashCheq.Description = item1.Description;
                        cashCheq.BankName = vitem.AccountName;
                        cashCheq.BankID = vitem.BankID;
                        cashCheq.RowState = "Update";
                        cashCheq.ID = item1.ID;
                        // cashViewDetails.Add(cashCheq);
                        cashnullobj.Add(cashCheq);
                    }
                }
            }
            if (item1.Trantype == "Cheque")
            {
                foreach (var vitem in veObj)
                {
                    if (vitem.ChequeID == item1.ID)
                    {
                        Cheque cashCheq1 = new Cheque();
                        cashCheq1.Amount = item1.Amount;
                        cashCheq1.ChequeNo = item1.ChequeNo;
                        cashCheq1.ChequeDate = item1.ChequeDate;
                        cashCheq1.BankName = item1.BankName;
                        cashCheq1.PartyName = vitem.AccountName;
                        cashCheq1.VEID = vitem.ID;
                        cashCheq1.BankID = vitem.BankID;
                        cashCheq1.Description = item1.Description;
                        cashCheq1.RowState = "Update";
                        cashCheq1.ID = item1.ID;
                        // chqViewDetails.Add(cashCheq1);
                        chequenullobj.Add(cashCheq1);
                    }
                }
            }
            if (item1.Trantype == "Card")
            {
                foreach (var vitem in veObj)
                {
                    if (vitem.ChequeID == item1.ID)
                    {
                        Cheque cashCheq2 = new Cheque();
                        cashCheq2.Amount = item1.Amount;
                        cashCheq2.IntAmount = vitem.Amount;
                        cashCheq2.Commission = item1.Commission;
                        cashCheq2.ChequeNo = vitem.Card;
                        cashCheq2.PartyName = vitem.AccountName;
                        cashCheq2.VEID = vitem.ID;
                        cashCheq2.BankID = vitem.BankID;
                        cashCheq2.Description = item1.Description;
                        cashCheq2.RowState = "Update";
                        cashCheq2.ID = item1.ID;
                        // cardViewDetails.Add(cashCheq2);
                        cardnullobj.Add(cashCheq2);
                    }
                }
            }
            if (item1.Trantype == "TT")
            {
                foreach (var vitem in veObj)
                {
                    if (vitem.ChequeID == item1.ID)
                    {
                        Cheque cashCheq3 = new Cheque();
                        cashCheq3.Amount = item1.Amount;
                        cashCheq3.ChequeNo = item1.ChequeNo;
                        cashCheq3.ChequeDate = item1.ChequeDate;
                        cashCheq3.PartyName = vitem.AccountName;
                        cashCheq3.VEID = vitem.ID;
                        cashCheq3.BankID = vitem.BankID;
                        cashCheq3.Description = item1.Description;
                        cashCheq3.RowState = "Update";
                        cashCheq3.ID = item1.ID;
                        //ttViewDetails.Add(cashCheq3);
                        ttnullobj.Add(cashCheq3);
                    }
                }
            }

        }
        foreach (var item1 in veObj)
        {
            if (item1.TranType == "Charge")
            {
                if (item1.Credit == null)
                    Charges = "0.00";
                else
                    Charges = decimal.Parse((item1.Credit).ToString()).ToString("0.00");
                SelectChrgId = item1.AccountID;
                ChargeId = item1.ID;

            }
            if (item1.TranType == "Deduction")
            {
                if (item1.Debit == null)
                    Discount = "0.00";
                else
                    Discount = decimal.Parse((item1.Debit).ToString()).ToString("0.00");
                SelectDedId = item1.AccountID;
                DedId = item1.ID;
            }
            StateHasChanged();
        }
        if (chqObj != null && amtdt.Count() == 0)
        {
            foreach (Cheque item in chqObj) // Loop through List with foreach
            {
                AmtDetails dt = new AmtDetails();
                dt.Type = item.Trantype;
                //dt.Description = item.ChequeNo == "" ? "" : item.ChequeNo + "-" + item.ChequeDate == "" ? "" : item.ChequeDate + "-" + item.Description == "" ? "" : item.Description;
                dt.Description = item.Description;
                dt.Amount = item.Amount;
                dt.BankID = item.BankID;
                dt.ChequeNo = item.ChequeNo;
                dt.ChequeDate = item.ChequeDate;
                dt.TrnID = item.ID;
                dt.State = "Old";
                dt.PartyID = ObCustomer.ID;
                dt.BankName = item.BankName;
                amtdt.Add(dt);
            }
        }
        Calculations();
        BefrEditAlloct = Allocated;
        bfrEditDiff = difference;
        await Gridnew.Refresh();
        await cashGrid.Refresh();
        await InvokeAsync(StateHasChanged);
    }
    public void FocusHandler(Syncfusion.Blazor.Calendars.FocusEventArgs args)
    {
        this.DateObj.Show();
    }
    public void FocusHandlerTT(Syncfusion.Blazor.Calendars.FocusEventArgs args)
    {
        this.DateObjTT.Show();
    }
    private void CardValueChangeHandler(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        GridnewCard.SelectRow(ChequeIndex);
        try
        {
            //PopupCardAmntError = false;
            cardTotAmount = Convert.ToDecimal(e.Value);
            cardTotAmount1 = Convert.ToDecimal(e.Value);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public void CardCreatedHandler(object args)
    {
        GridnewCard.SelectRow(0);
    }
    public void CommisionValueChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var cardtotAmountnew = cardTotAmount;
        GridnewCard.SelectRow(ChequeIndex);
        try
        {
            //PopupCardAmntError = false;
            var cardcommsn = Convert.ToDecimal(e.Value);
            //cardTotAmount = Convert.ToDecimal(args.Value);
            cardTotAmount1 = Convert.ToDecimal(cardtotAmountnew) * ((100 + cardcommsn) / 100);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            // PopupCardAmntError = true;
        }
    }
    //Tab Key press
    public async void Keydo(KeyboardEventArgs Args, string tranType)
    {
        try
        {
            if (Args.Code == "Tab")
            {
                if (tranType == "cash")
                {
                    chechValid = true;
                    DeleteVisble = false;
                    await Gridnew.EndEditAsync();
                    var anyDuplicate = cashnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                    foreach (var dup in anyDuplicate)
                    {
                        foreach (var cshitm in cashnullobj)
                        {
                            if (cshitm.ID == dup)
                            {
                                await Gridnew.DeleteRecordAsync("ID", cshitm);
                                await Gridnew.AddRecordAsync(cshitm);
                                break;
                            }
                        }
                    }
                    StateHasChanged();
                    await Gridnew.EndEditAsync();
                    foreach (var item in cashnullobj)
                    {
                        if (item.Amount == null || item.Amount <= 0)
                        {
                            var indx = Gridnew.GetRowIndexByPrimaryKeyAsync(item.ID);
                            chechValid = false;
                        }
                    }
                    if (chechValid == true)
                    {
                        AddPk = y + 1;
                        cashnullobj = Gridnew.DataSource.ToList();
                        Cheque newAftrTab = new Cheque()
                        {
                            ID = AddPk,
                            BankName = ObAccountCash.BankName,
                            PartyID = 0,
                            PartyName = " ",
                            BankID = ObAccountCash.BankID,
                            Commission = 0,
                            ChequeNo = " ",
                            Trantype = "Cash",
                            Description = CashDes,
                            Status = "newAftrProceed"
                        };
                        cashnullobj.Add(newAftrTab);
                        await Gridnew.Refresh();
                        var indx = await Gridnew.GetRowIndexByPrimaryKeyAsync(AddPk);
                        indx = cashnullobj.Count();
                        await Gridnew.SelectRowAsync(Convert.ToDouble(indx - 1));
                        await Gridnew.StartEditAsync();
                    }
                }
                else if (tranType == "card")
                {
                    chechValid = true;
                    cardDeleteVisble = false;
                    await GridnewCard.EndEditAsync();
                    cardTotAmount = 0;
                    cardTotAmount1 = 0;
                    var anyDuplicate = cardnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                    foreach (var dup in anyDuplicate)
                    {
                        foreach (var cshitm in cardnullobj)
                        {
                            if (cshitm.ID == dup)
                            {
                                await GridnewCard.DeleteRecordAsync("ID", cshitm);
                                await GridnewCard.AddRecordAsync(cshitm);
                                break;
                            }
                        }

                    }
                    foreach (var item in cardnullobj)
                    {
                        var selectCARD = CardList.Where(x => x.ID == item.CardID).Select(x => x.Description).ToArray();
                        item.ChequeNo = selectCARD[0];
                    }
                    StateHasChanged();
                    await GridnewCard.EndEditAsync();
                    foreach (var item in cardnullobj)
                    {
                        if (item.IntAmount == null || item.IntAmount <= 0)
                        {
                            var indx = GridnewCard.GetRowIndexByPrimaryKeyAsync(item.ID);
                            // await Gridnew.StartEditAsync();
                            chechValid = false;
                        }
                    }
                    if (chechValid == true)
                    {
                        AddPk = y + 1;
                        Cheque newAftrTab = new Cheque()
                        {
                            ID = AddPk,
                            CardID = ObAccountcard.CardID,
                            BankName = " ",
                            PartyID = 0,
                            PartyName = ObAccountcard.PartyName,
                            BankID = ObAccountcard.BankID,
                            Commission = 0,
                            ChequeNo = ObAccountcard.ChequeNo,
                            Trantype = "Card",
                            Description = CardDes,
                            // Amount = 0,
                            Status = "newAftrProceed",
                        };
                        y = y + 1;
                        cardnullobj.Add(newAftrTab);
                        await GridnewCard.Refresh();
                        var indx = await GridnewCard.GetRowIndexByPrimaryKeyAsync(AddPk);
                        indx = cardnullobj.Count();
                        await GridnewCard.SelectRowAsync(Convert.ToDouble(indx - 1));
                        await GridnewCard.StartEditAsync();
                    }
                }
                else if (tranType == "tt")
                {
                    chechValid = true;
                    ttDeleteVisble = false;
                    await GridnewTt.EndEditAsync();
                    var anyDuplicate = ttnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                    foreach (var dup in anyDuplicate)
                    {
                        foreach (var cshitm in ttnullobj)
                        {
                            if (cshitm.ID == dup)
                            {
                                await GridnewTt.DeleteRecordAsync("ID", cshitm);
                                await GridnewTt.AddRecordAsync(cshitm);
                                break;
                            }
                        }
                    }
                    StateHasChanged();
                    await GridnewTt.EndEditAsync();
                    foreach (var item in ttnullobj)
                    {
                        if (item.ChequeNo == null || item.ChequeNo == "" || item.ChequeNo == " " || item.ChequeDate == null || item.Amount == null || item.Amount <= 0)
                        {
                            var indx = GridnewTt.GetRowIndexByPrimaryKeyAsync(item.ID);
                            if (item.ChequeDate == null)
                                await DateObjTT.FocusAsync();
                            //  await Gridnew.StartEditAsync();
                            chechValid = false;
                        }
                    }
                    if (chechValid == true)
                    {
                        AddPk = y + 1;
                        Cheque newAftrProceed = new Cheque()
                        {
                            ID = AddPk,
                            BankName = " ",
                            PartyID = 0,
                            PartyName = ObAccountTt.PartyName,
                            BankID = ObAccountTt.BankID,
                            Commission = 0,
                            ChequeNo = " ",
                            Trantype = "TT",
                            Description = TtDes,
                            Status = "newAftrProceed"
                        };
                        y = y + 1;
                        ttnullobj.Add(newAftrProceed);
                        await GridnewTt.Refresh();

                        var indx = await GridnewTt.GetRowIndexByPrimaryKeyAsync(AddPk);
                        indx = ttnullobj.Count();
                        await GridnewTt.SelectRowAsync(Convert.ToDouble(indx - 1));
                        await GridnewTt.StartEditAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
    public async void KeydoCheque(KeyboardEventArgs Args)
    {
        chechValid = true;
        if (Args.Code == "Tab")
        {
            ttDeleteVisble = false;
            await GridnewCheque.EndEditAsync();
            var anyDuplicate = chequenullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
            foreach (var dup in anyDuplicate)
            {
                foreach (var cshitm in chequenullobj)
                {
                    if (cshitm.ID == dup)
                    {
                        await GridnewCheque.DeleteRecordAsync("ID", cshitm);
                        await GridnewCheque.AddRecordAsync(cshitm);
                        break;
                    }
                }
            }
            StateHasChanged();
            await GridnewCheque.EndEditAsync();
            foreach (var item in chequenullobj)
            {
                if (item.ChequeNo == null || item.ChequeNo == "" || item.ChequeNo == " " || item.ChequeDate == null || item.BankName == "" || item.BankName == " " || item.Amount == null || item.Amount <= 0)
                {
                    var indx = GridnewCheque.GetRowIndexByPrimaryKeyAsync(item.ID);
                    // await GridnewCheque.StartEditAsync();
                    if (item.ChequeDate == null)
                        await DateObj.FocusAsync();
                    chechValid = false;
                }
            }
            if (chechValid == true)
            {
                AddPk = y + 1;
                Cheque newAftrTab = new Cheque()
                {
                    ID = AddPk,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = ObAccountCheque.PartyName,
                    BankID = ObAccountCheque.BankID,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = "Cheque",
                    Description = ChqDes,
                    Status = "newAftrProceed"
                };
                y = y + 1;
                chequenullobj.Add(newAftrTab);
                await GridnewCheque.Refresh();
                var indx = await GridnewCheque.GetRowIndexByPrimaryKeyAsync(AddPk);
                indx = chequenullobj.Count();
                await GridnewCheque.SelectRowAsync(Convert.ToDouble(indx - 1));
                await GridnewCheque.StartEditAsync();
            }
        }
    }
    public void OnActionBegin(ActionEventArgs<Cheque> args)
    {
        if (btnCash == 1)
        {
            if (args.RequestType.Equals(Action.Add))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.BeginEdit))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.Save))
            {
                if (args.Data.BankID != 0)
                {
                    var selectAccName = AccountListcash.Where(x => x.ID == args.Data.BankID).Select(x => x.AccountName).ToArray();
                    args.Data.BankName = selectAccName[0];
                }
                if (args.Data.Status == "newAftrProceed")
                {
                    args.Data.Status = " ";
                }
                if (args.Data.Description == null || args.Data.Description == "" || args.Data.Description == " ")
                {
                    args.Data.Description = CashDes;
                    if (amtdt.Count > 0)
                    {
                        foreach (var itm in amtdt)
                        {
                            if (itm.TrnID == args.Data.ID)
                            {
                                itm.Description = CashDes;
                                itm.Description2 = CashDes;
                            }
                        }
                    }
                    gv_Receipt.Refresh();
                }
                Gridnew.SetRowDataAsync(args.Data.ID, args.Data);
                var anyDuplicate = cashnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                //foreach (var dup in anyDuplicate)
                //{
                //    foreach (var cshitm in cashnullobj)
                //    {
                //        if (cshitm.ID == dup)
                //        {
                //            //cashnullobj.Remove(cshitm);
                //            break;
                //        }
                //    }
                //}
                y = y + 1;
            }
        }
        if (btnCheque == 1)
        {
            if (args.RequestType.Equals(Action.Add))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.BeginEdit))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.Save))
            {
                if (args.Data.BankID != 0)
                {
                    var selectAccName = AccountListchq.Where(x => x.ID == args.Data.BankID).Select(x => x.AccountName).ToArray();
                    args.Data.PartyName = selectAccName[0];
                }
                if (args.Data.Status == "newAftrProceed")
                {
                    args.Data.Status = " ";
                }
                if (args.Data.Description == null || args.Data.Description == "" || args.Data.Description == " ")
                {
                    args.Data.Description = ChqDes;
                    if (amtdt.Count > 0)
                    {
                        foreach (var itm in amtdt)
                        {
                            if (itm.TrnID == args.Data.ID)
                            {
                                itm.Description = ChqDes;
                                itm.Description2 = ChqDes;
                            }
                        }
                    }
                    gv_Receipt.Refresh();
                }
                GridnewCheque.SetRowDataAsync(args.Data.ID, args.Data);
                y = y + 1;
            }
        }
        if (btnCard == 1)
        {
            if (args.RequestType.Equals(Action.Add))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.BeginEdit))
            {
                cardTotAmount = Convert.ToDecimal(args.Data.IntAmount);
                cardTotAmount1 = Convert.ToDecimal(args.Data.Amount);
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.Save))
            {
                if (args.Data.BankID != 0)
                {
                    var selectAccName = AccountListcard.Where(x => x.ID == args.Data.BankID).Select(x => x.AccountName).ToArray();
                    args.Data.PartyName = selectAccName[0];
                }
                if (args.Data.Commission == null)
                {
                    args.Data.Commission = 0;
                }
                if (args.Data.Status == "newAftrProceed")
                {
                    args.Data.Status = " ";
                }
                if (args.Data.Description == null || args.Data.Description == "" || args.Data.Description == " ")
                {
                    args.Data.Description = CardDes;
                    if (amtdt.Count > 0)
                    {
                        foreach (var itm in amtdt)
                        {
                            if (itm.TrnID == args.Data.ID)
                            {
                                itm.Description = CardDes;
                                itm.Description2 = CardDes;
                            }
                        }
                    }
                    gv_Receipt.Refresh();
                }
                GridnewCard.SetRowDataAsync(args.Data.ID, args.Data);
                y = y + 1;
            }
        }
        if (btnTT == 1)
        {
            if (args.RequestType.Equals(Action.Add))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.BeginEdit))
            {
                y = y + 1;
            }
            if (args.RequestType.Equals(Action.Save))
            {
                if (args.Data.BankID != 0)
                {
                    var selectAccName = AccountListtt.Where(x => x.ID == args.Data.BankID).Select(x => x.AccountName).ToArray();
                    args.Data.PartyName = selectAccName[0];
                }
                if (args.Data.Status == "newAftrProceed")
                {
                    args.Data.Status = " ";
                }
                if (ObCustomer.AccountName != null && (args.Data.Description == null || args.Data.Description == "" || args.Data.Description == " "))
                {
                    args.Data.Description = TtDes;
                    if (amtdt.Count > 0)
                    {
                        foreach (var itm in amtdt)
                        {
                            if (itm.TrnID == args.Data.ID)
                            {
                                itm.Description = TtDes;
                                itm.Description2 = TtDes;
                            }
                        }
                    }
                    gv_Receipt.Refresh();
                }
                GridnewTt.SetRowDataAsync(args.Data.ID, args.Data);
                y = y + 1;
            }
        }
    }
    public void MoreClick()
    {
        more = !more;
    }
    public void MoreClickDiscount()
    {
        moreDis = !moreDis;
    }
    private async void DedValueChangeHandler(ChangeEventArgs<int, AccountList> args)
    {
        // Here, you can customize your code.
        if (args.ItemData == null)
        {
        }
        else
        {
            SelectDedId = args.ItemData.ID;
            DedEnable = true;
            await TxtDed.FocusAsync();
        }
        StateHasChanged();
    }
    private async void ChargValueChangeHandler(ChangeEventArgs<int, AccountList> args)
    {
        // Here, you can customize your code.
        if (args.ItemData == null)
        {
        }
        else
        {
            SelectChrgId = args.ItemData.ID;
            ChargEnable = true;
            await combchrg.FocusOutAsync();
            await TxtCharg.FocusAsync();
        }
        StateHasChanged();
    }
    private async void CloseHandler(ClosedEventArgs args)
    {
        // Here, you can customize your code.
        await combchrg.FocusOutAsync();
        await TxtCharg.FocusAsync();
    }
    private async void CloseHandlerDed(ClosedEventArgs args)
    {
        // Here, you can customize your code.
        await combded.FocusOutAsync();
        await TxtDed.FocusAsync();
    }
    private void ChargeValueChangeHandler(string args)
    {
        // DiscChanged = args;
        Charges = decimal.Parse(args).ToString("0.00");
        if (!string.IsNullOrEmpty(args))
        {
            //Payment Paid
            Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(args) + Convert.ToDecimal(Discount)).ToString("0.00");
            //Allocated = Paid;
            if (ReceiptBal != null)
            {
                payableAmount = (Convert.ToDecimal(ReceiptBal.ToString())).ToString("0.00");
                balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Paid)).ToString("0.00");
            }
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
        }
        else
        {
            Charges = "0.00";
            Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(Discount)).ToString("0.00");
            //Allocated = Paid;
            if (ReceiptBal != null)
            {
                payableAmount = (Convert.ToDecimal(ReceiptBal.ToString())).ToString("0.00");
                balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Paid)).ToString("0.00");
            }
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
        }
    }
    //New Events
    public async Task New_Click()
    {
        btnsave = false;
        btnedit = true;
        btnNEW = true;
        EditEnable = true;
        btnpdf = true;
        btnprint = true;
        mode = "New";
        EnbleRemark = true;
        EditInit = false;
        btnNew = 1;
        DateTimeValue = DateTime.Now;
        vallobj = null;
        veObj.Clear();
        chqObj.Clear();
        cashnullobj.Clear();
        chequenullobj.Clear();
        ttnullobj.Clear();
        cardnullobj.Clear();
        Discount = "0.00";
        Charges = "0.00";
        Allocated = "0.00";
        payableAmount = "0.00";
        balance = "0.00";
        difference = "0.00";
        Total = "0.00";
        SelectChrgId = 0;
        SelectDedId = 0;
        CustomerCombo = "";
        DefaultBalace = Convert.ToDecimal(balance);
        vNo = await taxServ.GetNextNoAsync(vtype, BranchID);
        var VNO = vNo.ToString().PadLeft(5, '0');
        ReceiptNo = VNO.ToString();
        dtVoucherEntryOld = null;
        ObVoucher = new Voucher();
        vallobj = new List<VoucherAllocation>();
        veObj = new List<dtfinVEntry>();
        chqObj = new List<Cheque>();
        //CmbCharges = (await _IAccountList.GetAccounts("Payment Charges", BranchID)).ToList();
        //Cmbdeductions=(await _IAccountList.GetAccounts("Payment Deductions", BranchID)).ToList();
        var CashTemp = AccountListcash.Where(c => c.IsDefault == 1).FirstOrDefault();

        if (CashTemp != null)
        {
            ObAccountCash.BankID = CashTemp.ID;
            ObAccountCash.BankName = CashTemp.AccountName;
        }
        else
        {
            ObAccountCash.BankID = AccountListcash[0].ID;
            ObAccountCash.BankName = AccountListcash[0].AccountName;
        }
        var ChequeTemp = AccountListchq.Where(c => c.IsDefault == 1).FirstOrDefault();
        if (ChequeTemp != null)
        {
            ObAccountCheque.BankID = ChequeTemp.ID;
            ObAccountCheque.PartyName = ChequeTemp.AccountName;
        }
        else
        {
            ObAccountCheque.BankID = AccountListchq[0].ID;
            ObAccountCheque.PartyName = AccountListchq[0].AccountName;
        }
        ObAccountCard = AccountListcard.Where(c => c.IsDefault == 1).FirstOrDefault();
        CardList2 = (await _ICardList.GetCards()).ToList();
        ObCardlist = CardList2.Where(c => c.ID == 1).First();
        if (ObAccountCard != null)
        {
            ObAccountcard.BankID = ObAccountCard.ID;
            ObAccountcard.PartyName = ObAccountCard.AccountName;
        }
        ObAccountcard.CardID = ObCardlist.ID;
        ObAccountcard.ChequeNo = ObCardlist.Description;
        ObAccountTT = AccountListtt.Where(c => c.IsDefault == 1).FirstOrDefault();
        if (ObAccountTT != null)
        {
            ObAccountTt.BankID = ObAccountTT.ID;
            ObAccountTt.PartyName = ObAccountTT.AccountName;
        }
        else
        {
            ObAccountTt.BankID = AccountListtt[0].ID;
            ObAccountTt.PartyName = AccountListtt[0].AccountName;
        }
        cashnullobj.Add(new Cheque() { ID = 1, Amount = DefaultBalace, BankName = ObAccountCash.BankName, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCash.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = CashDes });
        chequenullobj.Add(new Cheque() { ID = 1, Amount = DefaultBalace, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCheque.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = ChqDes, ChequeDate = null });
        cardnullobj.Add(new Cheque() { ID = 1, Amount = DefaultBalace, BankName = " ", PartyID = 0, PartyName = ObAccountcard.PartyName, BankID = ObAccountcard.BankID, Commission = 0, ChequeNo = ObAccountcard.ChequeNo, Trantype = null, Description = CardDes, CardID = ObAccountcard.CardID });
        ttnullobj.Add(new Cheque() { ID = 1, Amount = DefaultBalace, BankName = " ", PartyID = 0, PartyName = ObAccountTt.PartyName, BankID = ObAccountTt.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = TtDes });
        amtdt.Clear();

        Calculations();
        NewGridEdit();
        await Tab.SelectAsync(1);
        await Tab.SelectAsync(0);
        await InvokeAsync(StateHasChanged);

    }
    //Payment details
    public void NewGridEdit()
    {
        if (Gridnew != null)
        {
            Gridnew.SelectRowAsync(0);
            Gridnew.StartEditAsync();
        }

    }
    //public void OnTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    //{
    //    if (mode == "New")
    //    {
    //        if (args.SelectedIndex == 0)
    //        {
    //            Gridnew.SelectRowAsync(0);
    //            Gridnew.StartEditAsync();
    //        }
    //        if (args.SelectedIndex == 1)
    //        {
    //            GridnewCheque.SelectRowAsync(0);
    //            GridnewCheque.StartEditAsync();
    //        }
    //        if (args.SelectedIndex == 2)
    //        {
    //            GridnewCard.SelectRowAsync(0);
    //            GridnewCard.StartEditAsync();
    //        }
    //        if (args.SelectedIndex == 3)
    //        {
    //            GridnewTt.SelectRowAsync(0);
    //            GridnewTt.StartEditAsync();
    //        }
    //    }
    //}

    public void OnTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        if (args.SelectedIndex == 0)
        {
            if (mode == "New" && CashPrcd == false)
            {
                var cashitem = cashnullobj.Where(x => x.ID == 1).ToList().FirstOrDefault();
                cashitem.Amount = DefaultBalace;
                Gridnew.RefreshColumnsAsync();
                //GridnewCheque.SetRowDataAsync(1, cashitem);
                Gridnew.SelectRowAsync(0);
                Gridnew.StartEditAsync();


            }
            //else
            //{
            //    var indx = cashnullobj.Count();
            //    Gridnew.SelectRowAsync(indx - 1);
            //    Gridnew.StartEditAsync();
            //}

        }
        if (args.SelectedIndex == 1)
        {
            if (mode == "New" && ChqPrcd == false)
            {
                var cashitem = chequenullobj.Where(x => x.ID == 1).ToList().FirstOrDefault();
                cashitem.Amount = DefaultBalace;
                GridnewCheque.SetRowDataAsync(1, cashitem);
                GridnewCheque.SelectRowAsync(Convert.ToDouble(0));
                GridnewCheque.StartEditAsync();
            }
            //else
            //{
            //     var indx = chequenullobj.Count();
            //    GridnewCheque.SelectRowAsync(indx-1);
            //    GridnewCheque.StartEditAsync();
            ////DefaultBalace =Convert.ToDecimal(balance);
            //}


        }
        if (mode == "New" && CrdPrcd == false)
        {
            if (args.SelectedIndex == 2)
            {
                var indx = cardnullobj.Count();
                GridnewCard.SelectRowAsync(indx - 1);
                GridnewCard.StartEditAsync();
                DefaultBalace = Convert.ToDecimal(balance);
            }
        }
        if (args.SelectedIndex == 3)
        {
            if (mode == "New" && TtPrcd == false)
            {
                var cashitem = ttnullobj.Where(x => x.ID == 1).ToList().FirstOrDefault();
                cashitem.Amount = DefaultBalace;
                GridnewTt.RefreshColumnsAsync();
                GridnewTt.SelectRowAsync(Convert.ToDouble(0));
                GridnewTt.StartEditAsync();
            }
            //else
            //{
            //var indx = ttnullobj.Count();
            //GridnewTt.SelectRowAsync(indx-1);
            //GridnewTt.StartEditAsync();
            //}

        }
    }

    //New Events

    //Edit Events
    public async void Edit_Click()
    {
        btnpdf = true;
        btnsave = false;
        btnprint = true;
        EditInit = true;
        mode = "Edit";
        btnedit = true;
        btnNEW = true;
        ChargEnable = true;
        DedEnable = true;
        EditEnable = true;
        EnbleRemark = true;
        try
        {
            cashnullobj.Add(new Cheque() { ID = cashnullobj.Count() + 1, BankName = ObAccountCash.BankName, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCash.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = CashDes, Status = "newAftrProceed" });
        }
        catch (Exception ex)
        {
            cashnullobj.Add(new Cheque() { ID = 1, BankName = ObAccountCash.BankName, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCash.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = CashDes, Status = "newAftrProceed" });
        }
        try
        {
            chequenullobj.Add(new Cheque() { ID = chequenullobj.Count() + 1, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCheque.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = ChqDes, ChequeDate = null, Status = "newAftrProceed" });
        }
        catch (Exception ex)
        {
            chequenullobj.Add(new Cheque() { ID = 1, PartyID = 0, PartyName = ObAccountCheque.PartyName, BankID = ObAccountCheque.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = ChqDes, ChequeDate = null, Status = "newAftrProceed" });
        }
        try
        {
            cardnullobj.Add(new Cheque() { ID = cardnullobj.Count() + 1, BankName = " ", PartyID = 0, PartyName = ObAccountcard.PartyName, BankID = ObAccountcard.BankID, Commission = 0, ChequeNo = ObAccountcard.ChequeNo, Trantype = null, Description = CardDes, CardID = ObAccountcard.CardID, Status = "newAftrProceed" });
        }
        catch (Exception ex)
        {
            cardnullobj.Add(new Cheque() { ID = 1, BankName = " ", PartyID = 0, PartyName = ObAccountcard.PartyName, BankID = ObAccountcard.BankID, Commission = 0, ChequeNo = ObAccountcard.ChequeNo, Trantype = null, Description = CardDes, CardID = ObAccountcard.CardID, Status = "newAftrProceed" });
        }
        try
        {
            ttnullobj.Add(new Cheque() { ID = ttnullobj.Count() + 1, BankName = " ", PartyID = 0, PartyName = ObAccountTt.PartyName, BankID = ObAccountTt.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = TtDes, Status = "newAftrProceed" });
        }
        catch (Exception ex)
        {
            ttnullobj.Add(new Cheque() { ID = 1, BankName = " ", PartyID = 0, PartyName = ObAccountTt.PartyName, BankID = ObAccountTt.BankID, Commission = 0, ChequeNo = " ", Trantype = null, Description = TtDes, Status = "newAftrProceed" });
        }
        if (Gridnew != null)
        {
            await Gridnew.Refresh();
        }
        if (cashGrid != null)
        {
            await cashGrid.Refresh();
        }
        if (GridnewCheque != null)
        {
            await GridnewCheque.Refresh();
        }
        if (chqGrid != null)
        {
            await chqGrid.Refresh();
        }
        if (GridnewCard != null)
        {
            await GridnewCard.Refresh();
        }
        if (cardGrid != null)
        {
            await cardGrid.Refresh();
        }
        if (GridnewTt != null)
        {
            await GridnewTt.Refresh();
        }
        if (ttGrid != null)
        {
            await ttGrid.Refresh();
        }
        int count = 0;
        if (vallobj != null)
            count = vallobj.Count();
        var vallList = vallobj.Where(a => a.Receipt != 0);
        foreach (VoucherAllocation dr in vallList)
            dr.State = "Edit";
        // NewGridEdit();
        vallobjEdit = (await _AccountAllocationManager.AccountAllocation(ObVoucher.AccountID, vID, BranchID)).ToList();
        vallobj.AddRange(vallobjEdit);

        foreach (var item in vallobj)
        {
            if (item.ID != 0)
            {
                var indx = await gv_VoucherAllocation1.GetRowIndexByPrimaryKeyAsync(item.ID);
                var receiptgrid = item.Receipt;
                var balGrid = item.Balance;
                await gv_VoucherAllocation1.SetCellValueAsync(item.ID, "Receipt", receiptgrid);
                await gv_VoucherAllocation1.SetCellValueAsync(item.ID, "Balance", balGrid);
            }
            else
            {
                item.ID = editI;
                editI++;
            }
        }
        if (gv_VoucherAllocation1 != null)
        {
            await gv_VoucherAllocation1.Refresh();
            await gv_VoucherAllocation1.SelectRowsByRangeAsync(0, count - 1);
        }
        Allocated = BefrEditAlloct;
        difference = bfrEditDiff;
        await InvokeAsync(StateHasChanged);
        EditInit = false;
    }
    //Edit Events

    //Save Events
    public async Task Save_Click()
    {
        if (btnsave == false)
        {
            chklist = new ObservableCollection<Cheque>();
            if (mode == "Edit")
            {
                if (Convert.ToDecimal(Allocated) <= Convert.ToDecimal(Total))
                {
                    PopupLoading = true;
                    dtsFinancial dts = new dtsFinancial();
                    try
                    {
                        dtfinVoucher objVoucher = new dtfinVoucher();
                        objVoucher.VNo = ReceiptNo;
                        objVoucher.ID = vID;
                        objVoucher.VNoInt = Convert.ToInt64(ReceiptNo);
                        objVoucher.EffectiveDate = DateTimeValue;
                        objVoucher.CommonNarration = CommnNarration;
                        objVoucher.VDate = DateTimeValue.Date;
                        objVoucher.DueDate = DateTimeValue.Date;
                        objVoucher.CreatedDate = DateTimeValue;
                        objVoucher.ModifiedDate = (DateTime.Today).Date;
                        objVoucher.VType = vtype;
                        objVoucher.BranchID = BranchID;
                        //objVoucher.Remark = Descrptn;
                        objVoucher.AccountID = Convert.ToInt32(ObVoucher.AccountID);
                        objVoucher.AccountName = ObVoucher.AccountName;
                        //objVoucher.AccountCode = ObCustomer.AccountCode;
                        objVoucher.CreatedUserID = user;
                        objVoucher.ModifiedUserID = user;
                        objVoucher.ExchangeRate = 1;
                        objVoucher.Currency = 1;
                        objVoucher.ExchangeRate = 1;
                        objVoucher.PreparedBy = Username;
                        objVoucher.IsCanceled = Convert.ToBoolean(0);
                        objVoucher.Posted = Convert.ToBoolean(1);
                        objVoucher.ReadOnly = Convert.ToBoolean(0);
                        objVoucher.Printed = Convert.ToBoolean(0);
                        objVoucher.Freezed = Convert.ToBoolean(0);
                        objVoucher.CanceledDate = null;
                        objVoucher.CanceledUserID = null;
                        objVoucher.Remark = Remark;
                        objVoucher.DocNo = null;
                        objVoucher.PostingCode = null;
                        objVoucher.VRound = 0;
                        objVoucher.TRound = null;
                        objVoucher.ExciseAmt = null;
                        objVoucher.VRound = 0;
                        objVoucher.RowState = "Update";
                        //Amount Details Remaining
                        objVoucher.Amount = Convert.ToDecimal(Paid);
                        objVoucher.SubTotal = Convert.ToDecimal(Total);
                        objVoucher.VATAmt = null;
                        objVoucher.VATPaid = null;
                        dts.finVoucher = objVoucher;
                        VAllocationlist.Clear();
                        List<VoucherAllocation> ListVAlloc = vallobj.Where(a => a.Receipt != 0).ToList();
                        foreach (var vitem in ListVAlloc)
                        {
                            dtfinVoucherAllocation vAllocation = new dtfinVoucherAllocation();
                            vAllocation.Amount = vitem.Amount;
                            vAllocation.AccountID = ObVoucher.AccountID;
                            vAllocation.Balance = vitem.Balance;
                            vAllocation.Description = vitem.Description;
                            vAllocation.ExchangeRate = vitem.ExchangeRate;
                            vAllocation.Receipt = vitem.Receipt;
                            vAllocation.Paid = vitem.Paid;
                            vAllocation.VNo = vitem.VNo;
                            vAllocation.RowState = "Insert";
                            vAllocation.VEID = vitem.VEID;
                            vAllocation.VID = vitem.VID;
                            vAllocation.ID = vitem.ID;
                            vAllocation.Cash = vitem.Cash;
                            vAllocation.Cheque = vitem.Cheque;
                            vAllocation.TT = vitem.TT;
                            VAllocationlist.Add(vAllocation);
                        }
                        dts.finVAllocation = VAllocationlist.ToList().ToArray();
                        var SINo = 1;
                        foreach (var chqitem in amtdt)
                        {
                            Console.Write("amtdt");
                            Cheque dtChq = new Cheque();
                            dtChq.Amount = chqitem.Amount;
                            dtChq.CardType = chqitem.CardType;
                            dtChq.Commission = chqitem.Commission;
                            dtChq.ChequeNo = chqitem.ChequeNo;
                            dtChq.ChequeDate = chqitem.ChequeDate;
                            dtChq.ClrDays = chqitem.ClrDays;
                            dtChq.BankName = chqitem.BankName;
                            dtChq.AccountID = chqitem.BankID;
                            dtChq.BankID = chqitem.BankID;
                            dtChq.Description = chqitem.Description2;
                            dtChq.PartyID = ObCustomer.ID;
                            dtChq.Trantype = chqitem.Type;
                            if (chqitem.State == "Old")
                                dtChq.RowState = "Update";
                            else
                                dtChq.RowState = "Insert";
                            dtChq.SlNo = SINo;
                            dtChq.Status = "Dr";
                            dtChq.ID = chqitem.ID;
                            dtChq.VEID = chqitem.TrnID;
                            chklist.Add(dtChq);
                            SINo++;
                        }

                        //Deduction Charges
                        if (SelectDedId != 0)
                        {
                            Cheque Dedchq = new Cheque();
                            Dedchq.Amount = Convert.ToDecimal(Discount);
                            Dedchq.Trantype = "Deduction";
                            Dedchq.BankID = SelectDedId;
                            Dedchq.Status = "Dr";
                            if (DedId != 0)
                                Dedchq.RowState = "Update";
                            else
                                Dedchq.RowState = "Insert";
                            Dedchq.SlNo = SINo;
                            Dedchq.ID = DedId;
                            //DedChglist.Add(Dedchq);
                            SINo++;
                            chklist.Add(Dedchq);
                        }
                        if (SelectChrgId != 0)
                        {

                            Cheque Chrgchq = new Cheque();
                            Chrgchq.Amount = Convert.ToDecimal(Charges);
                            Chrgchq.Trantype = "Charge";
                            Chrgchq.BankID = SelectChrgId;
                            Chrgchq.Status = "Cr";
                            if (ChargeId != 0)
                                Chrgchq.RowState = "Update";
                            else
                                Chrgchq.RowState = "Insert";
                            Chrgchq.SlNo = SINo;
                            // DedChglist.Add(Chrgchq);
                            Chrgchq.ID = ChargeId;
                            chklist.Add(Chrgchq);
                        }
                        dtVoucherEntryOld = veObj;
                        returnVE = _finVEService.CreateVoucherEntry(dtVoucherEntryOld, chklist.ToList().ToArray(), Convert.ToInt32(ObVoucher.AccountID), Convert.ToInt64(ReceiptNo), Descrptn, "Cr", Convert.ToDecimal(Total), "Update").Result.ToArray();
                        dts.finVEntry = returnVE;
                        dts.finCheques = chklist.ToList().ToArray();
                        var vouchrID = await _Ifinancial.CreateFinancial(dts);
                        if (vouchrID != 0)
                        {
                            PopupLoading = false;
                            PopupVisible = true;
                            btnsave = true;
                            btnedit = false;
                            btnNEW = false;
                            btnpdf = false;
                            btnprint = false;
                            chklist.Clear();
                            Array.Clear(returnVE, 0, returnVE.Length);
                            vID = vouchrID;
                            mode = "View";
                            EditInit = true;
                            await init();
                            DataboundFlag = false;
                        }
                        else
                        {
                            PopupLoading = false;
                            PopupSaveError = true;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        PopupLoading = false;
                    }
                }

            }
            else
            {


                if (ObCustomer.ID == 0)
                {
                    isCustmr = true;
                    await SfCustomerObj.FocusAsync();
                }
                else
                {
                    if (mode == "New")
                    {


                        if (Convert.ToDecimal(Allocated) <= Convert.ToDecimal(Total))
                        {
                            PopupLoading = true;
                            dtsFinancial dts = new dtsFinancial();
                            try
                            {
                                dtfinVoucher objVoucher = new dtfinVoucher();
                                objVoucher.VNo = ReceiptNo;
                                objVoucher.VNoInt = Convert.ToInt64(ReceiptNo);
                                objVoucher.EffectiveDate = DateTimeValue;
                                objVoucher.CommonNarration = CommnNarration;
                                objVoucher.VDate = DateTimeValue.Date;
                                objVoucher.DueDate = DateTimeValue.Date;
                                objVoucher.CreatedDate = (DateTime.Today).Date;
                                objVoucher.ModifiedDate = (DateTime.Today).Date;
                                objVoucher.VType = vtype;
                                objVoucher.BranchID = 31;
                                objVoucher.Remark = Remark;
                                objVoucher.AccountID = ObCustomer.ID;
                                objVoucher.AccountName = ObCustomer.AccountName;
                                objVoucher.AccountCode = ObCustomer.AccountCode;
                                objVoucher.CreatedUserID = user;
                                objVoucher.ModifiedUserID = user;
                                objVoucher.ExchangeRate = 1;
                                objVoucher.Currency = 1;
                                objVoucher.ExchangeRate = 1;
                                objVoucher.PreparedBy = Username;
                                objVoucher.IsCanceled = Convert.ToBoolean(0);
                                objVoucher.Posted = Convert.ToBoolean(1);
                                objVoucher.ReadOnly = Convert.ToBoolean(0);
                                objVoucher.Printed = Convert.ToBoolean(0);
                                objVoucher.Freezed = Convert.ToBoolean(0);
                                objVoucher.CanceledDate = null;
                                objVoucher.CanceledUserID = null;

                                objVoucher.DocNo = null;
                                objVoucher.PostingCode = null;
                                objVoucher.VRound = 0;
                                objVoucher.TRound = null;
                                objVoucher.ExciseAmt = null;
                                objVoucher.VRound = 0;
                                objVoucher.RowState = "Insert";
                                //Amount Details Remaining
                                objVoucher.Amount = Convert.ToDecimal(Paid);
                                objVoucher.SubTotal = Convert.ToDecimal(Total);
                                objVoucher.VATAmt = null;
                                objVoucher.VATPaid = null;
                                dts.finVoucher = objVoucher;
                                VAllocationlist.Clear();
                                List<VoucherAllocation> ListVAlloc = vallobj.Where(a => a.Receipt != 0).ToList();
                                foreach (var vitem in ListVAlloc)
                                {
                                    dtfinVoucherAllocation vAllocation = new dtfinVoucherAllocation();
                                    vAllocation.Amount = vitem.Amount;
                                    vAllocation.AccountID = ObCustomer.ID;
                                    vAllocation.Balance = vitem.Balance;
                                    vAllocation.Description = vitem.Description;
                                    vAllocation.ExchangeRate = vitem.ExchangeRate;
                                    vAllocation.Receipt = vitem.Receipt;
                                    vAllocation.Paid = vitem.Paid;
                                    vAllocation.VNo = vitem.VNo;
                                    vAllocation.RowState = "Insert";
                                    vAllocation.VEID = vitem.VEID;
                                    vAllocation.VID = vitem.VID;
                                    vAllocation.Cash = vitem.Cash;
                                    vAllocation.Cheque = vitem.Cheque;
                                    vAllocation.TT = vitem.TT;
                                    VAllocationlist.Add(vAllocation);
                                }
                                dts.finVAllocation = VAllocationlist.ToList().ToArray();
                                var SINo = 1;
                                foreach (var chqitem in amtdt)
                                {
                                    Console.Write("amtdt");
                                    Cheque dtChq = new Cheque();
                                    dtChq.Amount = chqitem.Amount;
                                    dtChq.CardType = chqitem.CardType;
                                    dtChq.Commission = chqitem.Commission;
                                    dtChq.ChequeNo = chqitem.ChequeNo;
                                    dtChq.ChequeDate = chqitem.ChequeDate;
                                    dtChq.ClrDays = chqitem.ClrDays;
                                    dtChq.BankName = chqitem.BankName;
                                    dtChq.BankID = chqitem.BankID;
                                    dtChq.Description = chqitem.Description2;
                                    dtChq.PartyID = ObCustomer.ID;
                                    dtChq.Trantype = chqitem.Type;
                                    if (chqitem.State == "Old")
                                        dtChq.RowState = "Update";
                                    else
                                        dtChq.RowState = "Insert";
                                    dtChq.SlNo = SINo;
                                    dtChq.Status = "Dr";
                                    dtChq.ID = chqitem.ID;
                                    dtChq.VEID = chqitem.TrnID;
                                    chklist.Add(dtChq);
                                    SINo++;
                                }

                                //Deduction Charges
                                if (SelectDedId != 0)
                                {
                                    Cheque Dedchq = new Cheque();
                                    Dedchq.Amount = Convert.ToDecimal(Discount);
                                    Dedchq.Trantype = "Deduction";
                                    Dedchq.BankID = SelectDedId;
                                    Dedchq.Status = "Dr";
                                    Dedchq.RowState = "Insert";
                                    Dedchq.SlNo = SINo;
                                    //DedChglist.Add(Dedchq);
                                    SINo++;
                                    chklist.Add(Dedchq);
                                }
                                if (SelectChrgId != 0)
                                {

                                    Cheque Chrgchq = new Cheque();
                                    Chrgchq.Amount = Convert.ToDecimal(Charges);
                                    Chrgchq.Trantype = "Charge";
                                    Chrgchq.BankID = SelectChrgId;
                                    Chrgchq.Status = "Cr";
                                    Chrgchq.RowState = "Insert";
                                    Chrgchq.SlNo = SINo;
                                    // DedChglist.Add(Chrgchq);
                                    chklist.Add(Chrgchq);
                                }
                                returnVE = _finVEService.CreateVoucherEntry(dtVoucherEntryOld, chklist.ToList().ToArray(), ObCustomer.ID, Convert.ToInt64(ReceiptNo), Descrptn, "Cr", Convert.ToDecimal(Total), "Insert").Result.ToArray();
                                dts.finVEntry = returnVE;
                                dts.finCheques = chklist.ToList().ToArray();
                                var vouchrID = await _Ifinancial.CreateFinancial(dts);
                                if (vouchrID != 0)
                                {
                                    PopupLoading = false;
                                    PopupVisible = true;
                                    btnsave = true;
                                    btnedit = false;
                                    btnNEW = false;
                                    btnpdf = false;
                                    btnprint = false;
                                    chklist.Clear();
                                    Array.Clear(returnVE, 0, returnVE.Length);
                                    vID = vouchrID;
                                    mode = "View";
                                    EditInit = true;
                                    await init();
                                    DataboundFlag = false;
                                }
                                else
                                {
                                    PopupLoading = false;
                                    PopupSaveError = true;
                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                                PopupLoading = false;
                            }
                        }
                        else
                        {
                            btnsave = false;
                            PopupLoading = false;
                            allocatnErr = true;
                        }
                    }

                }
            }

        }
    }
    //Save Events

    //Other Events
    IEnumerable<VoucherAllocation> selectedBills;
    IEnumerable<VoucherAllocation> SelectedBills
    {
        get { return selectedBills; }
        set
        {
            selectedBills = value;
            InvokeAsync(StateHasChanged);
        }
    }
    //Other Events

    //Filtering
    public async Task OnCustomerFiltering(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var pre = new WhereFilter();
        var predicate = new List<WhereFilter>();
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountCode", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountName", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        pre = WhereFilter.Or(predicate);
        var query = new Query().Where(pre);
        await this.SfCustomerObj.Filter(CustomerList, query);
    }
    private void OnReceiptTextChangedHandler(String args)
    {
        if (vaselect != null || vaselect != "")
        {
            Allocated = Convert.ToDecimal(args).ToString();
            ValueChangeHandler(DiscChanged);
        }
    }
    private void OnReceiptInputHandler(InputEventArgs args)
    {
        if (vaselect != null || vaselect != "")
        {
            Allocated = Convert.ToDecimal(args.Value).ToString();
            ValueChangeHandler(DiscChanged);
        }
    }
    private void InputHandler(InputEventArgs args)
    {
        var newval = args;
        InvokeAsync(StateHasChanged);
    }
    private void ChargeInputHandler(InputEventArgs args)
    {
        var newCharge = args;
        //  ChargEnable = true;
        InvokeAsync(StateHasChanged);
    }
    private void ValueChangeHandler(string args)
    {
        DiscChanged = args;
        Discount = decimal.Parse(args).ToString("0.00");

        if (!string.IsNullOrEmpty(args))
        {
            Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(args)).ToString("0.00");
            ////Allocated = Paid;
            if (ReceiptBal != null)
            {
                payableAmount = (Convert.ToDecimal(ReceiptBal.ToString())).ToString("0.00");
                balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Paid)).ToString("0.00");
            }
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
        }
        else
        {
            Discount = "0.00";
            Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(Discount)).ToString("0.00");
            //Allocated = Paid;
            if (ReceiptBal != null)
            {
                payableAmount = (Convert.ToDecimal(ReceiptBal.ToString())).ToString("0.00");
                balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Paid)).ToString("0.00");
            }
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
        }
    }
    // Customer Name Valuechange handler
    private async Task AccCatValueChangeHandler(ChangeEventArgs<string, string> args)
    {
        // Here, you can customize your code.
        DefAccCat = args.Value;
        CustomerList = (await _IInvAccounts.GetAccountsByCategoryReceipt(args.Value, BranchID)).ToList();
    }
    private async void CustValueChangeHandler(ChangeEventArgs<string, dtInvAccounts> args)
    {
        ObCustomer = args.ItemData;
        if (mode != null && mode != "View")
        {
            if (args.ItemData != null)
            {
                ObCustomer = args.ItemData;
                AccSaveCheck = args.ItemData.AccountName;
                vallobj = (await _AccountAllocationManager.AccountAllocation(args.ItemData.ID, vID, BranchID)).ToList();
                var i = 1;
                foreach (var itn in vallobj)
                {
                    itn.ID = i;
                    i = i + 1;

                }
                //ReceiptBal = ReceiptServ.GetBalance(args.ItemData.ID, BranchID);
                ReceiptBal = await ReceiptServ.GetBalance(args.ItemData.ID, BranchID);

                SibList = CustomerList.Where(x => x.ParentID == ObCustomer.ParentID).ToList();

                CalcView();
                StateHasChanged();
            }
            else
            {
                ObCustomer = new dtInvAccounts();
            }
        }
    }
    void OnSelect(dtInvAccounts listData)
    {
        var Selected = listData;
        CustList = listData.AccountName;
        StateHasChanged();
    }
    //ValueChanged

    //Bill datagrid View side create handler
    public void CreatedHandler(object args)
    {
        // Here, you can customize your code.
        if (mode != "New")
        {
            var rowCount = vallobj.Count();
            gv_VoucherAllocation.SelectRowsByRangeAsync(0, rowCount - 1);
            AllwSelection = false;
        }
    }


    public void RowSelectingHandler(RowSelectingEventArgs<VoucherAllocation> args)
    {
        //EditInit = false;
        if (EditInit == false && DataboundFlag == true)
        {
            if (args.IsHeaderCheckboxClicked && Headchecked == false)
            {
                Headchecked = true;
                args.Cancel = true;
                gv_VoucherAllocation1.ClearRowSelectionAsync();
                gv_VoucherAllocation1.SelectRowsByRangeAsync(0, vallobj.Count() - 1);
            }
            if (!args.IsHeaderCheckboxClicked)
            {
                Headchecked = false;
            }
            if (Convert.ToDecimal(Total) == 0) { args.Cancel = true; }

            if (Convert.ToDecimal(Total) != 0)
            {
                if ((Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)) <= 0)
                {
                    args.Cancel = true; //enable this to prevent the row selection
                }
            }
        }
    }
    //New Deselecting code
    public void RowDeselectingHandler(RowDeselectEventArgs<VoucherAllocation> args)
    {
        if (EditInit == false)
        {
            Headchecked = false;
            if (args.IsHeaderCheckboxClicked)
            {

                var SelectedRecords2 = gv_VoucherAllocation1.GetSelectedRecords().Result.ToList();
                foreach (var itm in SelectedRecords2)
                {
                    var Drec = itm.Receipt;
                    gv_VoucherAllocation1.SetCellValueAsync(itm.ID, "Balance", (itm.Receipt + itm.Balance));
                    gv_VoucherAllocation1.SetCellValueAsync(itm.ID, "Receipt", (Drec - Drec));
                }
            }
        }
    }
    public async void NewRowDeselectHandler(RowDeselectEventArgs<VoucherAllocation> args)
    {
        if (EditInit == false)
        {
            IList<VoucherAllocation> v_all = new List<VoucherAllocation>();
            var selectedKey = args.Data;
            if ((Convert.ToDecimal(Total) + Convert.ToDecimal(Allocated)) > 0)
            {
                if (Convert.ToDecimal(Total) > 0)
                {
                    Decimal Allocation = Convert.ToDecimal(vallobj.Sum(r => r.Receipt));
                    if (Convert.ToDecimal(Total) + Allocation > 0)
                    {
                        Decimal ReceiptSum = Convert.ToDecimal(vallobj.Sum(r => r.Receipt));
                        ReceiptTot = (Convert.ToDecimal(Total) - ReceiptSum).ToString();
                        //var index = vallobj.FindIndex(i => i.VEID == Convert.ToDecimal(selectedKey));
                        if (Convert.ToDecimal(ReceiptTot) <= selectedKey.Balance)
                        {
                            if ((Convert.ToDecimal(ReceiptTot) - selectedKey.Balance) <= 0)
                            {
                                var rec2 = selectedKey.Receipt;
                                selectedKey.Receipt = selectedKey.Balance - selectedKey.Balance;
                                selectedKey.Balance = selectedKey.Balance + rec2;
                                selectedKey.Cash = 0;
                                selectedKey.Cheque = 0;
                                selectedKey.TT = 0;

                            }
                            else
                            {
                                selectedKey.Receipt = selectedKey.Balance;
                                selectedKey.Balance = selectedKey.Balance + selectedKey.Receipt;
                                selectedKey.Cash = 0;
                                selectedKey.Cheque = 0;
                                selectedKey.TT = 0;
                            }
                        }
                        else if (Convert.ToDecimal(ReceiptTot) > selectedKey.Balance)
                        {
                            var rec1 = selectedKey.Receipt;
                            selectedKey.Receipt = selectedKey.Balance - selectedKey.Balance;
                            selectedKey.Balance = selectedKey.Balance + rec1;
                            selectedKey.Cash = 0;
                            selectedKey.Cheque = 0;
                            selectedKey.TT = 0;
                        }
                        else
                        {
                            toastservice.ShowError("Try Again !!!");
                        }
                    }
                    else
                    {
                        //selectedKey.ToList().RemoveAt(x);
                    }
                }
                else
                {
                    toastservice.ShowError("Payment amount is empty");
                }
            }
            ChkBill = 1;
            Allocated = vallobj.Sum(r => r.Receipt).ToString();
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString();
            await InvokeAsync(StateHasChanged);
        }
    }
    //SelectionChange
    //Already Exist
    public async void RowSelectHandler(RowSelectEventArgs<VoucherAllocation> args)
    {
        if (EditInit == false && DataboundFlag == true)
        {
            var selectedKey = args.Data;
            if (args.IsHeaderCheckboxClicked)
            {
                var SelectedRecords = await gv_VoucherAllocation1.GetSelectedRowIndexes();
            }
            if ((Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)) > 0)
            {
                if (Convert.ToDecimal(Total) > 0)
                {
                    Decimal Allocation = Convert.ToDecimal(vallobj.Sum(r => r.Receipt));
                    if (Convert.ToDecimal(Total) - Allocation > 0)
                    {
                        Decimal ReceiptSum = Convert.ToDecimal(vallobj.Sum(r => r.Receipt));
                        ReceiptTot = (Convert.ToDecimal(Total) - ReceiptSum).ToString();
                        //var index = vallobj.FindIndex(i => i.VEID == Convert.ToDecimal(selectedKey));
                        if (Convert.ToDecimal(ReceiptTot) <= selectedKey.Balance)
                        {
                            if ((Convert.ToDecimal(ReceiptTot) - selectedKey.Balance) <= 0)
                            {
                                selectedKey.Receipt = Convert.ToDecimal(ReceiptTot);
                                selectedKey.Balance = selectedKey.Balance - selectedKey.Receipt;
                                //Default Amount Setting
                                if (Cashmode == 1)
                                {
                                    if (amtdt[0].Type == "Cash")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.Cash = selectedKey.Receipt;
                                            RemainingCash = amtdt[0].Amount - selectedKey.Receipt;
                                        }
                                        else
                                        { selectedKey.Cash = amtdt[0].Amount; }
                                    }
                                    else if (amtdt[0].Type == "Cheque")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.Cheque = selectedKey.Receipt;
                                            RemainingCheque = amtdt[0].Amount - selectedKey.Receipt;
                                        }
                                        else
                                        { selectedKey.Cheque = amtdt[0].Amount; }
                                    }
                                    else if (amtdt[0].Type == "TT")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.TT = selectedKey.Receipt;
                                            RemainingTt = amtdt[0].Amount - selectedKey.Receipt;

                                        }
                                        else
                                        { selectedKey.TT = amtdt[0].Amount; }
                                    }
                                }

                            }
                            else
                            {
                                selectedKey.Receipt = selectedKey.Balance;
                                selectedKey.Balance = selectedKey.Balance - selectedKey.Receipt;
                                if (Cashmode == 1)
                                {
                                    if (amtdt[0].Type == "Cash")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.Cash = selectedKey.Receipt;
                                            RemainingCash = amtdt[0].Amount - selectedKey.Receipt;
                                        }
                                        else
                                        { selectedKey.Cash = amtdt[0].Amount; }
                                    }
                                    else if (amtdt[0].Type == "Cheque")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.Cheque = selectedKey.Receipt;
                                            RemainingCheque = amtdt[0].Amount - selectedKey.Receipt;
                                        }
                                        else
                                        { selectedKey.Cheque = amtdt[0].Amount; }
                                    }
                                    else if (amtdt[0].Type == "TT")
                                    {
                                        if (selectedKey.Receipt < amtdt[0].Amount)
                                        {
                                            selectedKey.TT = selectedKey.Receipt;
                                            RemainingTt = amtdt[0].Amount - selectedKey.Receipt;

                                        }
                                        else
                                        { selectedKey.TT = amtdt[0].Amount; }
                                    }
                                }

                            }
                        }
                        else if (Convert.ToDecimal(ReceiptTot) > selectedKey.Balance)
                        {
                            selectedKey.Receipt = selectedKey.Balance;
                            selectedKey.Balance = selectedKey.Balance - selectedKey.Receipt;
                            if (Cashmode == 1)
                            {
                                if (amtdt[0].Type == "Cash")
                                {
                                    if (selectedKey.Receipt < amtdt[0].Amount)
                                    {
                                        selectedKey.Cash = selectedKey.Receipt;
                                        RemainingCash = amtdt[0].Amount - selectedKey.Receipt;
                                    }
                                    else
                                    { selectedKey.Cash = amtdt[0].Amount; }
                                }
                                else if (amtdt[0].Type == "Cheque")
                                {
                                    if (selectedKey.Receipt < amtdt[0].Amount)
                                    {
                                        selectedKey.Cheque = selectedKey.Receipt;
                                        RemainingCheque = amtdt[0].Amount - selectedKey.Receipt;
                                    }
                                    else
                                    { selectedKey.Cheque = amtdt[0].Amount; }
                                }
                                else if (amtdt[0].Type == "TT")
                                {
                                    if (selectedKey.Receipt < amtdt[0].Amount)
                                    {
                                        selectedKey.TT = selectedKey.Receipt;
                                        RemainingTt = amtdt[0].Amount - selectedKey.Receipt;

                                    }
                                    else
                                    { selectedKey.TT = amtdt[0].Amount; }
                                }
                            }

                        }
                        else
                        {
                            toastservice.ShowError("Try Again !!!");
                        }
                    }
                    else
                    {
                        //selectedKey.ToList().RemoveAt(x);
                    }
                }
                else
                {
                    toastservice.ShowError("Payment amount is empty");
                }
            }
            else
            {
                args.Cancel = true;
                Headchecked = true;
            }

            ChkBill = 1;

            Allocated = vallobj.Sum(r => r.Receipt).ToString();
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString();

            gv_VoucherAllocation1.StartEditAsync();
            await InvokeAsync(StateHasChanged);
        }

    }
    //SelectionChange

    // New Row Select
    // New Row Select

    //Calculations
    public void CalcView()
    {
        // Discount = "0.00";
        Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(Discount)).ToString();
        payableAmount = (Convert.ToDecimal(ReceiptBal.ToString())).ToString();
        balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Total)).ToString();
        DefaultBalace = Convert.ToDecimal(ReceiptBal.ToString());
        if (mode == "New" && CashPrcd == false)
        {
            var cashitem = cashnullobj.Where(x => x.ID == 1).ToList().FirstOrDefault();
            cashitem.Amount = DefaultBalace;
            //Gridnew.SetRowDataAsync(1, cashitem);
            //Gridnew.SelectRowAsync(Convert.ToDouble(0));
            //Gridnew.StartEditAsync();
            Tab.SelectAsync(1);
            Tab.SelectAsync(0);
        }
        difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString();
        StateHasChanged();
    }
    public void Calculations()
    {
        Paid = decimal.Parse(amtdt.Sum(amt => amt.Amount).ToString()).ToString("0.00");
        Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(Discount)).ToString("0.00");
        if (ReceiptBal != null)
        {
            payableAmount = (Convert.ToDecimal(ReceiptBal.ToString()) + Convert.ToDecimal(Total)).ToString("0.00");
            balance = (Convert.ToDecimal(ReceiptBal.ToString())).ToString("0.00");// - Convert.ToDecimal(Total)).ToString();
            difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
        }
    }
    public void SummaryCalculations()
    {
        Paid = decimal.Parse(amtdt.Sum(va => va.Amount).ToString()).ToString("0.00");
        //Discount = "0.00";
        Total = (Convert.ToDecimal(Paid) - Convert.ToDecimal(Charges) + Convert.ToDecimal(Discount)).ToString("0.00");
        //Allocated = Paid;
        if (ReceiptBal != null)
        {
            payableAmount = ReceiptBal.ToString();
            balance = (Convert.ToDecimal(ReceiptBal.ToString()) - Convert.ToDecimal(Paid)).ToString("0.00");
        }
        difference = (Convert.ToDecimal(Total) - Convert.ToDecimal(Allocated)).ToString("0.00");
    }
    //Calculations

    //Other Button Events
    public void OnRowRemoving(AmtDetails dataItem)
    {
        var SelectedType = dataItem.Type;
        if (mode == "New")
        {


            if (SelectedType == "Cash")
            {
                foreach (var deletitem in cashnullobj)
                {
                    if (deletitem.ID == dataItem.ID)
                    {
                        cashnullobj.Remove(deletitem);
                        Gridnew.Refresh();
                        break;
                    }
                }
            }
            else if (SelectedType == "Cheque")
            {
                foreach (var deletitem in chequenullobj)
                {
                    if (deletitem.ID == dataItem.ID)
                    {
                        chequenullobj.Remove(deletitem);
                        GridnewCheque.Refresh();
                        break;
                    }
                }
            }
            else if (SelectedType == "Card")
            {
                foreach (var deletitem in cardnullobj)
                {
                    if (deletitem.ID == dataItem.ID)
                    {
                        cardnullobj.Remove(deletitem);
                        GridnewCard.Refresh();
                        break;
                    }
                }
            }

            else if (SelectedType == "TT")
            {
                foreach (var deletitem in ttnullobj)
                {
                    if (deletitem.ID == dataItem.ID)
                    {
                        ttnullobj.Remove(deletitem);
                        GridnewTt.Refresh();
                        break;
                    }
                }
            }
        }
        amtdt.Remove(dataItem);
        InvokeAsync(StateHasChanged);
        SummaryCalculations();
    }

    public async Task CashOnRowRemoving(Cheque dataItem)
    {
        if (mode == "New")
        {
            foreach (var deletitem in amtdt)
            {
                if (deletitem.ID == dataItem.ID && deletitem.Type == "Cash")
                {
                    amtdt.Remove(deletitem);
                    break;
                }
            }
            cashnullobj.Remove(dataItem);
            if (cashnullobj.Count() <= 0)
            {
                DeleteVisble = false;
                Cheque deleteNewRow = new Cheque()
                {
                    ID = y + 1,
                    BankName = ObAccountCash.BankName,
                    PartyID = 0,
                    PartyName = " ",
                    BankID = ObAccountCash.BankID,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = null,
                    Description = ObCustomer.AccountName
                };
                cashnullobj.Add(deleteNewRow);
            }
        }
        await Gridnew.Refresh();
        await InvokeAsync(StateHasChanged);
        SummaryCalculations();
    }

    public async Task ChqOnRowRemoving(Cheque dataItem)
    {
        if (mode == "New")
        {
            foreach (var deletitem in amtdt)
            {
                if (deletitem.ID == dataItem.ID && deletitem.Type == "Cheque")
                {
                    amtdt.Remove(deletitem);
                    break;
                }
            }
            chequenullobj.Remove(dataItem);
            if (chequenullobj.Count() <= 0)
            {
                chqDeleteVisble = false;
                Cheque chqDeleteNewRow = new Cheque()
                {
                    ID = y + 1,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = " ",
                    BankID = 0,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = null,
                    Description = " ",
                    ChequeDate = null,
                    Amount = 0
                };
                chequenullobj.Add(chqDeleteNewRow);
            }
        }
        await GridnewCheque.Refresh();
        await InvokeAsync(StateHasChanged);
        SummaryCalculations();
    }

    public async Task CardOnRowRemoving(Cheque dataItem)
    {
        if (mode == "New")
        {
            foreach (var deletitem in amtdt)
            {
                if (deletitem.ID == dataItem.ID && deletitem.Type == "Card")
                {
                    amtdt.Remove(deletitem);
                    break;
                }
            }
            cardnullobj.Remove(dataItem);
            if (cardnullobj.Count() <= 0)
            {
                cardDeleteVisble = false;
                Cheque cardDeleteNewRow = new Cheque()
                {
                    ID = y + 1,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = " ",
                    BankID = 0,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = null,
                    Description = " ",
                };
                cardnullobj.Add(cardDeleteNewRow);
            }
        }
        await GridnewCard.Refresh();
        await InvokeAsync(StateHasChanged);
        SummaryCalculations();
    }

    public async Task TtOnRowRemoving(Cheque dataItem)
    {
        if (mode == "New")
        {
            foreach (var deletitem in amtdt)
            {
                if (deletitem.ID == dataItem.ID && deletitem.Type == "TT")
                {
                    amtdt.Remove(deletitem);
                    break;
                }
            }
            ttnullobj.Remove(dataItem);
            if (ttnullobj.Count <= 0)
            {
                ttDeleteVisble = false;
                Cheque ttDeleteNewRow = new Cheque()
                {
                    ID = y + 1,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = " ",
                    BankID = 0,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = null,
                    Description = " "
                };
                ttnullobj.Add(ttDeleteNewRow);
            }
        }
        await GridnewTt.Refresh();
        await InvokeAsync(StateHasChanged);
        SummaryCalculations();
    }
    public async Task Proceed_Click()
    {
        try
        {
            if (btnCash == 1)
            {
                DeleteVisble = true;

                await Gridnew.EndEditAsync();
                if (amtdt.Count() > 0)
                {
                    foreach (var editItem in cashnullobj)
                    {
                        foreach (var chqitem in amtdt)
                        {
                            if (chqitem.Type == "Cash")
                            {
                                amtdt.Remove(chqitem);
                                break;
                            }
                        }
                    }
                }
                var anyDuplicate = cashnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                var newAftrPrcd = cashnullobj.Where(x => x.Status == "newAftrProceed").ToList();
                foreach (var item in newAftrPrcd)
                {

                    foreach (var prcditem in cashnullobj)
                    {
                        if (prcditem == item)
                        {
                            cashnullobj.Remove(prcditem);
                            break;
                        }
                    }
                }
                StateHasChanged();
                foreach (var item in cashnullobj)
                {
                    if (item.BankID != 0)
                    {
                        Cheque dt1 = new Cheque();
                        dt1.VEID = item.VEID;
                        var selectAccID = AccountListcash.Where(x => x.ID == item.BankID).Select(x => x.AccountName).ToArray();
                        item.BankName = selectAccID[0];
                        dt1.BankName = selectAccID[0];
                        dt1.BankID = item.BankID;
                        dt1.Trantype = "Cash";
                        dt1.CardType = null;
                        dt1.Description = item.Description;
                        dt1.Amount = Convert.ToDecimal(item.Amount);
                        if (item.RowState == null)
                            item.RowState = "Insert";
                        dt1.RowState = item.RowState;
                        if (mode == "New")
                            dt1.TranID = Convert.ToInt32(item.ID);
                        chqDetails.Add(dt1);
                    }
                }
                Cheque newAftrProceed = new Cheque()
                {
                    ID = y + 1,
                    BankName = ObAccountCash.BankName,
                    PartyID = 0,
                    PartyName = " ",
                    BankID = ObAccountCash.BankID,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = "Cash",
                    Description = CashDes,
                    Status = "newAftrProceed"
                };
                if (CashPrcd == false && mode == "New") { Cashmode++; }
                CashPrcd = true;
                cashscndload = true;
                cashnullobj.Add(newAftrProceed);
                y = y + 1;
                await Gridnew.Refresh();
            }
            if (btnCheque == 1)
            {
                chqDeleteVisble = true;
                if (ChqPrcd == false && mode == "New") { Cashmode++; }
                ChqPrcd = true;
                await GridnewCheque.EndEditAsync();
                if (amtdt.Count > 0)
                {
                    foreach (var editItem2 in chequenullobj)
                    {
                        foreach (var chqitem2 in amtdt)
                        {
                            if (chqitem2.Type == "Cheque")
                            {
                                amtdt.Remove(chqitem2);
                                break;
                            }
                        }
                    }
                }

                var anyDuplicate = chequenullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();

                foreach (var dup in anyDuplicate)
                {
                    foreach (var chqitm in chequenullobj)
                    {
                        if (chqitm.ID == dup)
                        {
                            chequenullobj.Remove(chqitm);
                            break;
                        }
                    }

                }
                var newAftrPrcd = chequenullobj.Where(x => x.Status == "newAftrProceed").ToList();

                foreach (var item in newAftrPrcd)
                {

                    foreach (var prcditem in chequenullobj)
                    {
                        if (prcditem == item)
                        {
                            chequenullobj.Remove(prcditem);
                            break;
                        }
                    }
                }

                StateHasChanged();
                foreach (var item in chequenullobj)
                {
                    Cheque dt2 = new Cheque();
                    dt2.VEID = item.VEID;
                    //var selectAccID = AccountListchq.Where(x => x.AccountName == item.PartyName).Select(x => x.ID).ToArray();
                    dt2.BankID = item.BankID;
                    dt2.BankName = item.BankName;
                    dt2.PartyID = ObCustomer.ID;
                    dt2.PartyName = item.PartyName;
                    dt2.Trantype = "Cheque";
                    //dt1.Trantype= item.Trantype.ToString();
                    dt2.ChequeNo = item.ChequeNo;
                    dt2.ChequeDate = item.ChequeDate;
                    dt2.Description = item.Description;
                    dt2.Amount = Convert.ToDecimal(item.Amount);

                    if (item.RowState == null)
                        item.RowState = "Insert";
                    dt2.RowState = item.RowState;
                    if (mode == "New")
                        dt2.TranID = Convert.ToInt32(item.ID);
                    chqDetails.Add(dt2);
                }

                Cheque newAftrProceed = new Cheque()
                {
                    ID = y + 1,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = ObAccountCheque.PartyName,
                    BankID = ObAccountCheque.BankID,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = "Cheque",
                    Description = ChqDes,
                    Status = "newAftrProceed"
                };
                y = y + 1;
                chequenullobj.Add(newAftrProceed);
                await GridnewCheque.Refresh();
            }

            if (btnCard == 1)
            {
                cardDeleteVisble = true;
                CrdPrcd = true;
                await GridnewCard.EndEditAsync();
                if (amtdt.Count() > 0)
                {
                    foreach (var editItem3 in cardnullobj)
                    {
                        foreach (var chqitem3 in amtdt)
                        {
                            if (chqitem3.Type == "Card")
                            {
                                amtdt.Remove(chqitem3);
                                break;
                            }
                        }
                    }
                }
                var anyDuplicate = cardnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                foreach (var dup in anyDuplicate)
                {
                    foreach (var citm in cardnullobj)
                    {
                        if (citm.ID == dup)
                        {
                            cardnullobj.Remove(citm);
                            break;
                        }
                    }

                }
                var newAftrPrcd = cardnullobj.Where(x => x.Status == "newAftrProceed").ToList();

                foreach (var item in newAftrPrcd)
                {
                    foreach (var prcditem in cardnullobj)
                    {
                        if (prcditem == item)
                        {
                            cardnullobj.Remove(prcditem);
                            break;
                        }
                    }
                }

                StateHasChanged();
                foreach (var item in cardnullobj)
                {
                    Cheque dt3 = new Cheque();
                    dt3.VEID = item.VEID;
                    var selectCARD = CardList.Where(x => x.ID == item.CardID).Select(x => x.Description).ToArray();
                    item.ChequeNo = selectCARD[0];
                    dt3.BankID = item.BankID;
                    dt3.PartyID = ObCustomer.ID;
                    dt3.BankName = item.PartyName;
                    dt3.PartyName = item.PartyName;
                    dt3.Trantype = "Card";
                    dt3.CardType = Convert.ToInt32(item.CardID);
                    dt3.Amount = Convert.ToDecimal(item.Amount);
                    dt3.Description = item.Description;
                    dt3.ChequeNo = item.CardType.ToString();
                    dt3.Commission = item.Commission;
                    if (item.RowState == null)
                        item.RowState = "Insert";
                    dt3.RowState = item.RowState;
                    dt3.CardID = item.CardID;
                    if (mode == "New")
                        dt3.TranID = Convert.ToInt32(item.ID);
                    chqDetails.Add(dt3);
                }
                Cheque newAftrProceed = new Cheque()
                {
                    ID = y + 1,
                    CardID = ObAccountcard.CardID,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = ObAccountcard.PartyName,
                    BankID = ObAccountcard.BankID,
                    Commission = 0,
                    ChequeNo = ObAccountcard.ChequeNo,
                    Trantype = "Card",
                    Description = CardDes,
                    Amount = 0,
                    Status = "newAftrProceed",
                };
                y = y + 1;
                cardnullobj.Add(newAftrProceed);
                await GridnewCard.Refresh();
            }
            if (btnTT == 1)
            {
                ttDeleteVisble = true;
                if (TtPrcd == false && mode == "New") { Cashmode++; }
                TtPrcd = true;
                await GridnewTt.EndEditAsync();
                if (amtdt.Count() > 0)
                {
                    foreach (var editItem4 in ttnullobj)
                    {
                        foreach (var chqitem4 in amtdt)
                        {
                            if (chqitem4.Type == "TT")
                            {
                                amtdt.Remove(chqitem4);
                                break;
                            }
                        }
                    }
                }

                var anyDuplicate = ttnullobj.GroupBy(x => x.ID).Where(g => g.Count() > 1).Select(y => y.Key).ToList();
                foreach (var dup in anyDuplicate)
                {
                    foreach (var ttitm in ttnullobj)
                    {
                        if (ttitm.ID == dup)
                        {
                            ttnullobj.Remove(ttitm);
                            break;
                        }
                    }
                }
                var newAftrPrcd = ttnullobj.Where(x => x.Status == "newAftrProceed").ToList();

                foreach (var item in newAftrPrcd)
                {
                    foreach (var prcditem in ttnullobj)
                    {
                        if (prcditem == item)
                        {
                            ttnullobj.Remove(prcditem);
                            break;
                        }
                    }
                }
                StateHasChanged();
                foreach (var item in ttnullobj)
                {
                    Cheque dt4 = new Cheque();
                    dt4.VEID = item.VEID;
                    //var selectAccID = AccountListtt.Where(x => x.AccountName == item.PartyName).Select(x => x.ID).ToArray();
                    dt4.BankID = item.BankID;
                    dt4.BankName = item.PartyName;
                    dt4.PartyID = ObCustomer.ID;
                    dt4.PartyName = item.PartyName;
                    dt4.Trantype = "TT";
                    dt4.ChequeDate = item.ChequeDate;
                    dt4.ChequeNo = item.ChequeNo;
                    dt4.Amount = Convert.ToDecimal(item.Amount);
                    dt4.Description = item.Description;
                    if (item.RowState == null)
                        item.RowState = "Insert";
                    dt4.RowState = item.RowState;
                    if (mode == "New")
                        dt4.TranID = Convert.ToInt32(item.ID);
                    chqDetails.Add(dt4);
                }
                Cheque newAftrProceed = new Cheque()
                {
                    ID = y + 1,
                    BankName = " ",
                    PartyID = 0,
                    PartyName = ObAccountTt.PartyName,
                    BankID = ObAccountTt.BankID,
                    Commission = 0,
                    ChequeNo = " ",
                    Trantype = "TT",
                    Description = TtDes,
                    Status = "newAftrProceed"

                };
                y = y + 1;
                ttnullobj.Add(newAftrProceed);
                await GridnewTt.Refresh();
            }


            foreach (Cheque item in chqDetails)
            {
                AmtDetails dt = new AmtDetails();
                // dt.Type = txtPayMethod;
                dt.TrnID = item.VEID;
                dt.ID = item.TranID;
                dt.Type = item.Trantype;
                dt.Description = item.ChequeNo + "-" + item.ChequeDate + "-" + item.Description;
                dt.Amount = item.Amount;
                //New Add
                if (item.RowState == "Insert")
                    dt.State = "New";
                else
                    dt.State = "Old";
                dt.ChequeNo = item.ChequeNo;
                dt.ChequeDate = item.ChequeDate;
                dt.CardType = item.CardType;
                dt.BankName = item.BankName;
                dt.BankID = item.BankID;
                dt.PartyID = item.PartyID;
                dt.PartyName = item.PartyName;
                dt.ClrDays = item.ClrDays;
                dt.Description2 = item.Description;
                dt.Commission = item.Commission;
                amtdt.Add(dt);
            }
            SummaryCalculations();
            DefaultBalace = Convert.ToDecimal(balance);
            chqDetails.Clear();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.Write(e);
        }
    }

    public void Clear_Click()
    {
        btnCash = 0;
        btnCheque = 0;
        btnCard = 0;
        btnTT = 0;
        CashDetails = null;
    }

    public void Bill_Default()
    {
        BillDefault = !BillDefault;
        if (BillDefault == true)
        {
            lblDefaultBtn = "Detailed";
            gridHeight = "100%";
        }
        else
        {
            lblDefaultBtn = "Default";
            gridHeight = "100";
        }
        StateHasChanged();
    }

    public async Task Close_click()
    {
        if (mode != "New")
        {
            mode = "View";
            btnCash = 0;
            btnCheque = 0;
            btnCard = 0;
            btnTT = 0;
            CashDetails = null;
            btnNew = 0;
            await init();
        }
    }

    public void DataBoundHandler(BeforeDataBoundArgs<VoucherAllocation> args)
    {
        DataboundFlag = true;
    }
    public void AccountRowSelectingHandler(RowSelectingEventArgs<dtInvAccounts> args)
    {
        CustList = args.Data.AccountName;
        AccountSearch = false;
        StateHasChanged();
    }
    public void OnInput(InputEventArgs args)
    {
        this.AccGrid.Search(args.Value);
    }
    public void OnSearch(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null)
        {
            AccGrid.SearchAsync(args.Value);
            this.StateHasChanged();
        }
    }
    public async Task Search_click()
    {
        AccountSearch = true;
        await InvokeAsync(StateHasChanged);
    }
    //Other Button Events
    public async Task PrePrint_Click()
    {
        var Data1 = await _BoldReport.GetFeeRecieptByID(vID, 0, "2022-2023");
        var VType = await _BoldReport.GetFeeVtype(vID);

        DataSource dt = new DataSource();
        dt.DataSet1 = new List<ExpandoObject>();
        if (GetVtype == "Receipt StudentExam")
        {
            foreach (var ds in VType)
            {
                foreach (var d in Data1)
                {
                    if (ds.TranType == "Cash")
                        d.TranType = d.TranType + ds.TranType + ", ";
                    else if (ds.TranType == "Cheque")
                        d.TranType = d.TranType + ds.TranType + "(" + ds.ChequeNo + "/ " + ds.ChequeDate.Value.ToString("dd-MM-yyyy") + "/ " + ds.BankName + "), ";
                }
            }
        }
        else if (GetVtype == "Receipt Student")
        {
            foreach (var ds in VType)
            {
                int index = VType.IndexOf(ds);
                if ((Data1.Count() - 1) < index)
                {
                    Data1.Add(new ReceiptPrint());
                    Data1[index].AccountName = Data1[0].AccountName;
                    Data1[index].VEID = Data1[0].VEID;
                    Data1[index].ONO = Data1[0].ONO;
                    Data1[index].Class = Data1[0].Class;
                    Data1[index].Description = Data1[0].Description;
                    Data1[index].Amount = Data1[0].Amount;
                    Data1[index].Father = Data1[0].Father;
                    Data1[index].TRNNo = Data1[0].TRNNo;
                    Data1[index].Date = Data1[0].Date;
                    Data1[index].Accountcode = Data1[0].Accountcode;
                    Data1[index].Division = Data1[0].Division;
                }
                Data1[index].TranType = ds.TranType;
                Data1[index].debit = ds.debit;
                Data1[index].ChequeNo = ds.ChequeNo;
                Data1[index].ChequeDate = ds.ChequeDate;
                Data1[index].BankName = ds.BankName;
            }
        }
        dt.DataSet1.AddRange(JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data1)));
        if (GetVtype == "Receipt Student")
        {
            var Result = _BoldReport.GetReport("Student Fee Receipt", dt, null);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsSaveAsFile",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
        else if (GetVtype == "Receipt StudentExam")
        {
            var Result = _BoldReport.GetReport("Exam Fee Receipt", dt, null);
            System.IO.MemoryStream ms = new System.IO.MemoryStream();
            Result.FileStream.CopyTo(ms);
            await Runtime.InvokeVoidAsync(
                      "jsSaveAsFile",
                      "Fee Receipt.pdf",
                      Convert.ToBase64String(ms.ToArray()));
        }
    }

}