@page "/CollectionDetails"

@layout MainLayout
@namespace OrisonFeeAnalysis.Pages

@using System.Data
@using OrisonFeeAnalysis.Entities.Main

@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Data


@inject NavigationManager NavigationManager
@inject OrisonFeeAnalysis.Services.URLService UrlService
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonFeeAnalysis.Logics.Contract.Main.IAccountsMain _accountsmain

@inject IJSRuntime jsRuntime

@using Newtonsoft.Json
@using OrisonFeeAnalysis.Data.BoldReport
@using System.Dynamic
@inject OrisonFeeAnalysis.Logics.Contract.BoldReport.IBoldReportManager _BoldReport

<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>
<style>
    .e-spinner-pane {
        display: none !important;
    }
</style>
<div>

    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-12">

                <SfButton IconCss="Icon excel"  CssClass="e-btn4" @onclick="@ExportExcel"></SfButton>
                <SfButton IconCss="Icon pdf"  CssClass="e-btn4" @onclick="@ExportPdf"></SfButton>
                <SfDatePicker @bind-Value="@SDate" Format="dd-MM-yyyy" title="From Date" Width="150px" Placeholder="From Date"></SfDatePicker>
                <SfDatePicker @bind-Value="@EDate" Format="dd-MM-yyyy" title="To Date" Width="150px" Placeholder="To Date"></SfDatePicker>


                <SfButton IconCss="Icon search" @onclick="@Search_Click" title="Search" CssClass="e-btn4"></SfButton>

                <SfButton IconCss="Icon preprint"  CssClass="e-btn4" @onclick="@DownLoadDocs"></SfButton>

            </div>

        </div>
    </div>

    <div>
        <div class="box-card-shadow">


            <SfGrid ID="SGrid" DataSource="@collectionDetails"
                    GridLines="GridLine.Both"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    AllowPaging = "true"
                    Height="@GridHeight"
                    RowHeight="24"
                    Width="100%"
                    AllowResizing="true"
                    @ref="SGrid">

                @*<GridEvents RowSelected="" TValue="dtAccountsMain"></GridEvents>*@
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="100"></GridPageSettings>

                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Cash) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div style="padding-top:5px;">
                                            <div style="font-size: 13px; position: absolute; left: 7px; font-weight: bold;">TOTAL AMOUNT</div> <div style="align-items:end;">@aggregate.Sum</div>
                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>


                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Cheque) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TT) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.ReregistrationFee) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.BookFee) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TransportationFee) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TuitionTerm1) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>

                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TuitionTerm2) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TuitionTerm3) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.ExamFee) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.MOE) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Others) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>


                        </GridAggregateColumns>

                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field=@nameof(dtAccountsMain.ReceiptNo) HeaderText="RecieptNo" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.StudentCode) HeaderText="Code" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.StudentName) HeaderText="Student Name" TextAlign="TextAlign.Left" Width="180"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.UserName) HeaderText="UserName" TextAlign="TextAlign.Left" Width="180"></GridColumn>
                    <GridColumn Format="dd/MM/yyyy" Field=@nameof(dtAccountsMain.FeesDate) HeaderText="Fees Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Class) HeaderText="Class" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Division) HeaderText="Division" TextAlign="TextAlign.Left" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cash) HeaderText="Cash" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="90" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cheque) HeaderText=" Cheque" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="110" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TT) HeaderText="TT" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.ReregistrationFee) HeaderText="Reregistration Fee" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="170" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.BookFee) HeaderText="Book Fee" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TransportationFee) HeaderText="TransportationFee" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="140" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TuitionTerm1) HeaderText="Tuition FeeTerm 1" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TuitionTerm2) HeaderText="Tuition FeeTerm 3" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TuitionTerm3) HeaderText="Tuition FeeTerm 3" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.ExamFee) HeaderText="Exam Fee" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.MOE) HeaderText="MOE" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Others) HeaderText="Others" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="120" Format="0.00"></GridColumn>



                </GridColumns>
                @if (Loading)
                {
                    <div class="spinner-overlay">
                        <img src="gif/loading-waiting.gif" alt="Loading..." class="spinner-image" />
                    </div>
                }
            </SfGrid>
            <div style="margin-top:5px;">
                <div class="row">
                    <div class="col-md-6">
                        <label>GRAND TOTAL COLLECTION</label>
                    </div>
                    <div class="col-md-6">
                        <label>@GrandTotal</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>BOOK'S TOTAL </label>
                    </div>
                    <div class="col-md-6">
                        <label>@BookSum</label>
                    </div>
                </div>
               @*  <div class="row">
                    <div class="col-md-6">
                        <label>TOTAL NO OF STUDENTS PAID</label>
                    </div>
                    <div class="col-md-6">
                        <label>@StudentCount</label>
                    </div>
                </div> *@
            </div>
        </div>
       
    </div>

</div>


@code {

    DateTime SDate, EDate;
    string AccYear = "", Description = "Default", GridHeight = "400px";
    public bool Isload = false, Loading = false;
    public string SelectedCustomer { get; set; }
    public int? RowIndex { get; set; } = 1003;
    int BranchID, UserID, AccountID, StudentCount = 0;
    decimal cashSum, ChequeSum, TTSum, BookSum;
    decimal GrandTotal;
    string StartDate, EndDate, Category;
    bool AllowOpen = false;

    public SfGrid<dtAccountsMain> SGrid { get; set; }


    private IList<dtAccountsMain> collectionDetails { get; set; }
    dtAccountsMain Employee = new dtAccountsMain();
    private IList<dtAccountsMain> CountList { get; set; }


    IEnumerable<string> DropdownData = new List<string>() {
      "Default",
      "Book Fee",
      "Transportation Fee",
      "Reregistration Fee",
      "Tuition Fee"

    };
    //dashboard
    private ElementReference codeBlock;
    public async Task DownLoadDocs()
    {

        List<JSReportParameter> parameters = new List<JSReportParameter>()
{
            new JSReportParameter()
            {
                Name = "SDate",
                Values = new List<string>(){ SDate.ToString("dd-MMM-yyyy") }
            },
            new JSReportParameter()
            {
                Name = "EDate",
                Values = new List<string>(){ SDate.ToString("dd-MMM-yyyy") }
            }
        };
        var Data = await SGrid.GetFilteredRecordsAsync();
        DataSource dt = new DataSource();
        dt.DataSet1 = new List<ExpandoObject>();
        dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data));
        var Result = _BoldReport.GetReport("Collection Details", dt, parameters);
        System.IO.MemoryStream ms = new System.IO.MemoryStream();
        Result.FileStream.CopyTo(ms);
        await jsRuntime.InvokeVoidAsync(
                  "jsSaveAsFile",
                  "Collection Details.pdf",
                  Convert.ToBase64String(ms.ToArray()));




    }

    protected override async Task OnInitializedAsync()
    {
        SDate = DateTime.Now;
        EDate = DateTime.Now;

        try
        {
            var dimension = await jsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
            GridHeight = (dimension.Height - 280).ToString() + "px";
            UserID = await sessionStorage.GetItemAsync<int>("UserID");
            AccountID = await sessionStorage.GetItemAsync<int>("AccountID");
            BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
            Category = await sessionStorage.GetItemAsync<string>("Category");
            AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        }
        catch (Exception)
        {
            await ClearLocalStorage();

            throw;
        }



    }


    public async void Search_Click()
    {
        Loading = true;
        collectionDetails = (await _accountsmain.GetDetailedCollection(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "All", "CollectionDetails")).ToList();
        var summary = collectionDetails.Aggregate(
            new { BookSum = 0m, GrandTotal = 0m },
            (acc, data) => new
            {
                BookSum = acc.BookSum + data.BookFee,
                GrandTotal = acc.GrandTotal + data.Total
            }
            );

        BookSum = summary.BookSum;
        GrandTotal = summary.GrandTotal;
        Loading = false;
        await InvokeAsync(StateHasChanged);
        // //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "All", "GetGridDataCount"));
        // CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "All", "DashBoardCount")).ToList();
        // StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));


        //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, StartDate, EndDate, "All", "GetGridDataCount"));
        //if (Description == "Default")
        //{
        //    Employees = (await _accountsmain.GetGridData(BranchId, AccYear, StartDate, EndDate, "All", "GetGridDataDetails")).ToList();
        //    //StudentCount = (await _accountsmain.GetGridCount(BranchId, AccYear, StartDate, EndDate, "All", "GetGridDataCount"));
        //}
        //else if (Description == "Book Fee")
        //{
        //    Employees = (await _accountsmain.GetGridData(BranchId, AccYear, StartDate, EndDate, "Book Fee", "GetGridDataDetails")).ToList();
        //    //StudentCount = (await _accountsmain.GetGridCount(BranchId, AccYear, StartDate, EndDate, "Book Fee", "GetGridDataCount"));
        //}
        //else if (Description == "Reregistration Fee")
        //{
        //    Employees = (await _accountsmain.GetGridData(BranchId, AccYear, StartDate, EndDate, "Reregistration Fee", "GetGridDataDetails")).ToList();
        //    //StudentCount = (await _accountsmain.GetGridCount(BranchId, AccYear, StartDate, EndDate, "Reregistration Fee", "GetGridDataCount"));
        //}
        //else if (Description == "Tuition Fee")
        //{
        //    Employees = (await _accountsmain.GetGridData(BranchId, AccYear, StartDate, EndDate, "Tuition Fee", "GetGridDataDetails")).ToList();
        //    //StudentCount = (await _accountsmain.GetGridCount(BranchId, AccYear, StartDate, EndDate, "Tuition Fee", "GetGridDataCount"));
        //}

        // GetDayTotal();
        //Loading = false;
        

    }


    // public decimal GetDayTotal()
    // {
    //     // Here, you can calculate custom aggregate operations and return the result.

    //     cashSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.Cash)).AsQueryable()));
    //     ChequeSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.Cheque)).AsQueryable()));
    //     TTSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.TT)).AsQueryable()));
    //     BookSum = Math.Round(Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.BookFee)).AsQueryable())), 2);

    //     return GrandTotal = Math.Round((cashSum + ChequeSum + TTSum), 2);



    // }

    public async Task ExportExcel()
    {

        await this.SGrid.ExportToExcelAsync();

    }

    public async Task ExportPdf()
    {

        await this.SGrid.ExportToPdfAsync();


    }


    string LogoutUrl;
    public async Task ClearLocalStorage()
    {
        LogoutUrl = (await UrlService.GetURL("LogOut")).ToString();

        await sessionStorage.ClearAsync();
        //Must check localstorage userid in each razor page

        NavigationManager.NavigateTo(LogoutUrl);

    }
}


