@page "/CollectionSummaryTillDate"

@using System.Data
@using OrisonFeeAnalysis.Entities.Main

@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Data
@inject IJSRuntime jsRuntime



@layout MainLayout

@namespace OrisonFeeAnalysis.Pages
@using Microsoft.AspNetCore.WebUtilities

@using Newtonsoft.Json
@using OrisonFeeAnalysis.Data.BoldReport
@using System.Dynamic
@inject OrisonFeeAnalysis.Logics.Contract.BoldReport.IBoldReportManager _BoldReport

@inject OrisonFeeAnalysis.Services.URLService UrlService
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonFeeAnalysis.Logics.Contract.Main.IAccountsMain _accountsmain
@inject OrisonFeeAnalysis.Logic.Contract.General.IUserLoginManager _IUserLoginManager
@inject OrisonFeeAnalysis.Logic.Contract.General.IUserLoginManager _IUserLoginManager

@inject NavigationManager NavigationManager
@using OrisonFeeAnalysis.Logics.Concrete.General


<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>
<style>
    .e-spinner-pane {
        display: none !important;
    }
</style>
<div>

    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-12">
                <SfButton IconCss="Icon excel"  CssClass="e-btn4" @onclick="@ExportExcel"></SfButton>
                <SfButton IconCss="Icon pdf"  CssClass="e-btn4" @onclick="@ExportPdf"></SfButton>
                <SfComboBox @bind-Value="@Description" TValue="string" TItem="String" Placeholder="Select...." DataSource="@DropdownData" Width="180px"></SfComboBox>
                <SfDatePicker @bind-Value="@EDate" Format="dd/MM/yyyy" title="To Date" Width="150px" Placeholder="To Date"></SfDatePicker>
                <SfButton IconCss="Icon search" @onclick="@Search_Click" title="Search" CssClass="e-btn4"></SfButton>
                <SfButton IconCss="Icon preprint" CssClass="e-btn4" @onclick="@DownLoadDocs"></SfButton>
                
            </div>
        </div>
    </div>

    <div>
        <div class="box-card-shadow">

            <SfGrid ID="SGrid" DataSource="@collectionSummaryTillDate"
                    GridLines="GridLine.Both"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    AllowPaging = "true"
                    RowHeight="24"
                    Height="@GridHeight"
                    Width="100%"
                    @ref="SGrid">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="100"></GridPageSettings>

                <GridPageSettings PageSize="100"></GridPageSettings>
                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Cash) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div style="padding-top:5px;">
                                            <div style="font-size:13px; position: absolute; left: 10px;">TOTAL </div> <div style="align-items:end;">@aggregate.Sum</div>
                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>


                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Cheque) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.TT) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn> 
                            <GridAggregateColumn Format="0.00" Field=@nameof(dtAccountsMain.Total) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>

                        </GridAggregateColumns>

                    </GridAggregate>
                </GridAggregates>
                <GridColumns>

                    <GridColumn Field=@nameof(dtAccountsMain.Feetype) HeaderText="Description" TextAlign="TextAlign.Left" Width="200"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cash) HeaderText="Cash" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="100" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cheque) HeaderText=" Cheque" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="100" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TT) HeaderText="TT" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="100" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Total) HeaderText="Total" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="100" Format="0.00"></GridColumn>

                </GridColumns>
                @if (Loading)
                {
                    <div class="spinner-overlay">
                        <img src="gif/loading-waiting.gif" alt="Loading..." class="spinner-image" />
                    </div>
                }

            </SfGrid>
            <div style="margin-top:5px;">
                <div class="row">
                    <div class="col-md-6">
                        <label>GRAND TOTAL COLLECTION</label>
                    </div>
                    <div class="col-md-6">
                        <label>@GrandTotal.ToString("0.00")</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>TOTAL NO OF STUDENTS</label>
                    </div>
                    <div class="col-md-6">
                        <label>@StudentCount</label>
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>NEW ADMISSION STUDENTS</label>
                    </div>
                    <div class="col-md-6">
                        <label>@NewStudentCount</label>
                    </div>

                </div>
                <div class="row">
                    <div class="col-md-6">
                        <label>STUDENTS WITH EXEMPTIONS</label>
                    </div>
                    <div class="col-md-6">
                        <label>@ExcemptionCount</label>
                    </div>

                </div>
            </div>

        </div>
     
    </div>
</div>


@code{

    DateTime EDate, SDate;
    string AccYear = "", Description = "Default", GridHeight = "400px";
    public bool Loading = false;
    int StudentCount = 0;
    decimal cashSum, ChequeSum, TTSum;
    decimal GrandTotal;
    string StartDate, EndDate, Category;
    int UserID, AccountID, BranchID;


    public SfGrid<dtAccountsMain> SGrid { get; set; }


    private IEnumerable<dtAccountsMain> collectionSummaryTillDate { get; set; }
    private Entities.Student.StudentCountDto Count { get; set; }
    public List<ExpandoObject> DesCount { get; set; }



    IEnumerable<string> DropdownData = new List<string>() {
      "Default",
      "Book Fee",
      "Reregistration Fee",
      "Tuition Fee",
      "MOE Book Fee",
      "Exam Fee"

    };

    //bold report
    private ElementReference codeBlock;
    public async Task DownLoadDocs()
    {
        string Des = Description == "Default" ? "ALL" : Description;
        var Data = await SGrid.GetFilteredRecordsAsync();

        List<JSReportParameter> parameters = new List<JSReportParameter>()
{
            new JSReportParameter()
            {
                Name = "SDate",
                Values = new List<string>(){ EDate.ToString() }
            },
            new JSReportParameter()
            {
                Name = "EDate",
                Values = new List<string>(){ "" }
            }
        };

        DataSource dt = new DataSource();
        dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data));
        // var tasks = new List<Task<List<ExpandoObject>>>();
        // switch (Description)
        // {
        //     case "Reregistration Fee":
        //         tasks.Add(_BoldReport.GetAnalysisData("StudentCountReregistration", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, Des, ""));
        //         break;
        //     default:
        //         tasks.Add(_BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, Des, ""));
        //         break;
        // }
        // tasks.Add(_BoldReport.GetAnalysisData("ExemptionStudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, Des, ""));
        // tasks.Add(_BoldReport.GetAnalysisData("NewStudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, Des, ""));
        // var results = await Task.WhenAll(tasks);
        // dt.DataSet4 = results[0]; 
        // dt.DataSet2 = results[1]; 
        // dt.DataSet3 = results[2];
        // var studentCounts = await _accountsmain.GetStudentCounts(AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, Des);
        dt.DataSet2 = new List<ExpandoObject>();
        dt.DataSet3 = new List<ExpandoObject>();
        dt.DataSet4 = new List<ExpandoObject>();

        dynamic expando = new ExpandoObject();
        expando.count =ExcemptionCount;
        dt.DataSet2.Add(expando);

        expando = new ExpandoObject();
        expando.count = NewStudentCount;
        dt.DataSet3.Add(expando);

        expando = new ExpandoObject();
        expando.count = StudentCount;
        dt.DataSet4.Add(expando); ;
        
        var Result = _BoldReport.GetReport("Collection Summary TillDate", dt, parameters);
        System.IO.MemoryStream ms = new System.IO.MemoryStream();
        Result.FileStream.CopyTo(ms);
        await jsRuntime.InvokeVoidAsync(
                  "jsSaveAsFile",
                  "Collection Summary TillDate.pdf",
                  Convert.ToBase64String(ms.ToArray()));
        await InvokeAsync(StateHasChanged);
    }




    protected override async Task OnInitializedAsync()
    {


        EDate = DateTime.Now;
        SDate = DateTime.Now;

        try
        {
            var dimension = await jsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
            GridHeight = (dimension.Height - 280).ToString() + "px";
            UserID = await sessionStorage.GetItemAsync<int>("UserID");
            AccountID = await sessionStorage.GetItemAsync<int>("AccountID");
            BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
            Category = await sessionStorage.GetItemAsync<string>("Category");
            AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        }
        catch (Exception)
        {
            await ClearLocalStorage();

            throw;
        }

    }

    int ExcemptionCount, NewStudentCount = 0;
    public async void Search_Click()
    {
        Loading = true;
        try
        {
            string formattedStartDate = SDate.ToString("MM/dd/yyyy");
            string formattedEndDate = EDate.ToString("MM/dd/yyyy");
            string descriptionFilter = Description == "Default" ? "All" : Description;
            string countType = Description == "Reregistration Fee" ? "StudentCountReregistration" : "StudentCount";

            var collectionDetailsTask = _accountsmain.GetCollectionSummaryTillDate(BranchID, AccYear, formattedEndDate, Description == "Default" ? "All" : Description);
            var countTask = _accountsmain.GetStudentCounts(AccYear, formattedStartDate, formattedEndDate, BranchID, descriptionFilter);

            collectionSummaryTillDate = await collectionDetailsTask;
            Count = await countTask;

            StudentCount = Description == "Reregistration Fee" ? Count.Reregistration : Count.Total;
            ExcemptionCount = Count.Excemption;
            NewStudentCount = Count.NewStudents;
            GrandTotal = collectionSummaryTillDate.Sum(data => data.Total);
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);

        }


        // collectionSummaryTillDate = (await _accountsmain.GetCollectionSummaryTillDate(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), Description == "Default" ? "All" : Description)).ToList();
        // GrandTotal = collectionSummaryTillDate.Sum(data => data.Total);
        // Loading = false;
        // await InvokeAsync(StateHasChanged);
        // if (Description == "Default")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "All", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "All", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "All", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        // }
        // else if (Description == "Book Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "Book Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "Book Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "Book Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        // }
        // else if (Description == "Reregistration Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "Reregistration Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCountReregistration", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "Reregistration Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "Reregistration Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));

        // }
        // else if (Description == "Transportation Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "Transportation Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "Transportation Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "Transportation Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        //     //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, StartDate, EndDate, "Reregistration Fee", "GetGridDataCount"));
        // }
        // else if (Description == "Tuition Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "Tuition Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "Tuition Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "Tuition Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        //     //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, StartDate, EndDate, "Tuition Fee", "GetGridDataCount"));
        // }
        // else if (Description == "MOE Book Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "MOE Book Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "MOE Book Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "MOE Book Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        //     //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, StartDate, EndDate, "Tuition Fee", "GetGridDataCount"));
        // }
        // else if (Description == "Exam Fee")
        // {
        //     Employees = (await _accountsmain.SummeryTill(BranchID, AccYear, EDate.ToString("MM/dd/yyyy"), "Exam Fee", "SummaryTillDate")).ToList();
        //     DesCount = await _BoldReport.GetAnalysisData("StudentCount", AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), BranchID, "Exam Fee", "");
        //     foreach (IDictionary<string, object> item in DesCount)
        //     {
        //         string k = item["count"].ToString();
        //         StudentCount = Convert.ToInt32(k);
        //     }
        //     //CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "Exam Fee", "DashBoardCount")).ToList();
        //     //StudentCount = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        //     //StudentCount = (await _accountsmain.GetGridCount(BranchID, AccYear, StartDate, EndDate, "Tuition Fee", "GetGridDataCount"));
        // }
        // GetDayTotal();

        // //Loading = false;
        
    }


    // public void RowSelecthandler(RowSelectEventArgs<dtAccountsMain> Args)
    // {
    //     SelectedCustomer = Args.Data.CustomerName;
    //     RowIndex = Args.Data.EmployeeID;
    // }


    // public decimal GetDayTotal()
    // {
    //     //Here, you can calculate custom aggregate operations and return the result.

    //     cashSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.Cash)).AsQueryable()));
    //     ChequeSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.Cheque)).AsQueryable()));
    //     TTSum = Convert.ToDecimal(Queryable.Sum(Employees.Select(x => (x.TT)).AsQueryable()));

    //     return GrandTotal = Math.Round((cashSum + ChequeSum + TTSum), 2);



    // }

    public async Task ExportExcel()
    {

        await this.SGrid.ExportToExcelAsync();

    }

    public async Task ExportPdf()
    {

        await this.SGrid.ExportToPdfAsync();


    }


    string LogoutUrl;
    public async Task ClearLocalStorage()
    {
        LogoutUrl = (await UrlService.GetURL("LogOut")).ToString();

        await sessionStorage.ClearAsync();
        //Must check localstorage userid in each razor page

        NavigationManager.NavigateTo(LogoutUrl);

    }




}
