@page "/Dashboard"
@using OrisonFeeAnalysis.Entities.Dashboard
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Spinner
@using OrisonFeeAnalysis.Entities.Main
@using OrisonFeeAnalyis.Entities.General
@using OrisonFeeAnalysis.Data.Login

@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

@using Syncfusion.Blazor.Grids
@using OrisonFeeAnalysis.Services
@inject OrisonFeeAnalysis.Logics.Contract.Main.IAccountsMain _accountsmain
@inject OrisonFeeAnalysis.Services.URLService UrlService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime


@using Newtonsoft.Json
@using OrisonFeeAnalysis.Data.BoldReport
@using System.Dynamic
@inject OrisonFeeAnalysis.Logics.Contract.BoldReport.IBoldReportManager _BoldReport


<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>
<style>
    .e-spinner-pane {
        display: none !important;
    }
</style>
<div>
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-12">
                <SfButton IconCss="Icon excel"  CssClass="e-btn4" @onclick="@ExportExcel"></SfButton>
                <SfButton IconCss="Icon pdf"  CssClass="e-btn4" @onclick="@ExportPdf"></SfButton>
                <SfDatePicker @bind-Value="SDate" Format="dd/MM/yyyy" Width="150px"></SfDatePicker>
                <SfDatePicker Format="dd/MM/yyyy" @bind-Value="EDate" Width="150px"></SfDatePicker>
                <SfButton IconCss="Icon search" @onclick="@GetData" title="Search" CssClass="e-btn4"></SfButton>
                <SfNumericTextBox TValue="int" @bind-Value="dashboardDetails.Count" ShowSpinButton="false" Enabled="false" Width="75px"></SfNumericTextBox>
                <SfNumericTextBox TValue="decimal" @bind-Value="@TotalAmount" ShowClearButton="true" ShowSpinButton="false" Enabled="false" Format="0.00" Width="100px"></SfNumericTextBox>
                <SfButton IconCss="Icon preprint"  CssClass="e-btn4" @onclick="@DownLoadDocs"></SfButton>
            </div>
        </div>
    </div>

    <div>
        <div class="box-card-shadow">
            <SfGrid ID="SGrid" GridLines="GridLine.Both" DataSource="@dashboardDetails.DashBoardData"
                    AllowResizing="true"
                    AllowSorting="true"
                    EnableAltRow="true"
                    AllowFiltering="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    Height="@GridHeight"
                    RowHeight="24"
                    @ref="SGrid">
                <GridSelectionSettings CheckboxOnly="true" PersistSelection="true"></GridSelectionSettings>
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(dtDashBoard.Description) HeaderText="Fees Description" IsPrimaryKey="true" TextAlign="TextAlign.Left" Width="300"></GridColumn>
                    <GridColumn Field=@nameof(dtDashBoard.Count) HeaderText="Nos" AllowAdding="false" AllowEditing="false" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(dtDashBoard.Amount) HeaderText="Amount" Format="0.00" AllowAdding="false" AllowEditing="false" Width="150" TextAlign="TextAlign.Left"></GridColumn>
                    <GridColumn Field=@nameof(dtDashBoard.ToDate) HeaderText="Date" Format="dd/MM/yyyy" Width="150" TextAlign="TextAlign.Left"></GridColumn>
                </GridColumns>
                @if (Loading)
                {
                    <div class="spinner-overlay">
                        <img src="gif/loading-waiting.gif" alt="Loading..." class="spinner-image" />
                    </div>
                }
            </SfGrid>
        </div>
    </div>
</div>





@code {

    SfDashboardLayout dashboardObject;
    DateTime SDate = DateTime.Now, EDate = DateTime.Now;
    public int TotalNos = 0;
    public Decimal TotalAmount = 0;
    public SfGrid<dtDashBoard> SGrid { get; set; }
    private IList<dtAccountsMain> CountList { get; set; }
    DateTime Date;
    int UserID, AccountID, BranchID;
    string Category;
    bool Loading = false;
    private DashboardDetailsDto dashboardDetails = new DashboardDetailsDto();
    string GridHeight = "470px";

    string AccYear = "";
    private ElementReference codeBlock;
    public async Task DownLoadDocs()
    {



        List<JSReportParameter> parameters = new List<JSReportParameter>()
        {
            new JSReportParameter()
            {
                Name = "SDate",
                Values = new List<string>(){ SDate.ToString("dd-MMM-yyyy") }
            },
            new JSReportParameter()
            {
                Name = "EDate",
                Values = new List<string>() { EDate.ToString("dd-MMM-yyyy") }
            }
        };
        var Data = await SGrid.GetFilteredRecordsAsync();
        DataSource dt = new DataSource();
        dt.DataSet1 = new List<ExpandoObject>();
        dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(Data));
        var Result = _BoldReport.GetReport("DashBoard", dt, parameters);
        System.IO.MemoryStream ms = new System.IO.MemoryStream();
        Result.FileStream.CopyTo(ms);
        await jsRuntime.InvokeVoidAsync(
                  "jsSaveAsFile",
                  "DashBoard.pdf",
                  Convert.ToBase64String(ms.ToArray()));

    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            UserID = await sessionStorage.GetItemAsync<int>("UserID");
            AccountID = await sessionStorage.GetItemAsync<int>("AccountID");
            BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
            Category = await sessionStorage.GetItemAsync<string>("Category");
            AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");

        }
        catch (Exception ex)
        {
            await ClearLocalStorage();

            throw ex;
        }



    }

    public async Task GetData()
    {
        Loading = true;
        dashboardDetails = await _accountsmain.GetDashBoardDetails(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"));
        TotalAmount = dashboardDetails.DashBoardData.Sum(data => data.Amount);
        // GridData = await _accountsmain.GetDashBoardData(dtdashBoard);
        // CountList = (await _accountsmain.GetCount(BranchID, AccYear, SDate.ToString("MM/dd/yyyy"), EDate.ToString("MM/dd/yyyy"), "All", "DashBoardCount")).ToList();
        // TotalNos = Convert.ToInt32(Queryable.Sum(CountList.Select(x => (x.Count)).AsQueryable()));
        // TotalAmount = Convert.ToDecimal(Queryable.Sum(GridData.Select(x => (x.Amount)).AsQueryable()));
        // Math.Round(TotalAmount);      
        Loading = false;
        await InvokeAsync(StateHasChanged);
    }

    public async Task ExportExcel()
    {

        await this.SGrid.ExportToExcelAsync();

    }

    public async Task ExportPdf()
    {

        await this.SGrid.ExportToPdfAsync();


    }

    string LogoutUrl;
    public async Task ClearLocalStorage()
    {
        LogoutUrl = (await UrlService.GetURL("LogOut")).ToString();

        await sessionStorage.ClearAsync();
        //Must check localstorage userid in each razor page

        NavigationManager.NavigateTo(LogoutUrl);

    }
}